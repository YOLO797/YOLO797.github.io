import{_ as n,W as s,X as a,Y as e,a1 as t}from"./framework-b609eea8.js";const p={},o=t(`<h3 id="_1-ref-reactive" tabindex="-1"><a class="header-anchor" href="#_1-ref-reactive" aria-hidden="true">#</a> 1. ref / reactive</h3><ul><li><p><code>ref</code> ：定义基本数据类型，如：<code>String/Boolean/Number</code></p></li><li><p><code>reactive</code> ：定义响应式变量，用于复杂数据类型，如：<code>Array/Object</code></p></li></ul><p><strong>区别：</strong></p><ul><li><p><code>ref</code> 用来定义基本类型数据，<code>reactive</code> 用来定义对象或数组类型数据</p></li><li><p><code>ref</code> 通过 <code>Object.defineProperty()</code> 中的<code>get</code> 和<code>set</code> 来实现响应式，<code>reactive</code> 通过使用 <code>Proxy</code> 来实现响应式</p></li><li><p><code>ref</code> 定义的数据，操作数据需要 <code>.value</code> ，读取数据时模板中直接读取不需要。<code>reactive</code> 定义的数据，不需要 <code>.value</code></p></li></ul><h3 id="_2-toref-torefs" tabindex="-1"><a class="header-anchor" href="#_2-toref-torefs" aria-hidden="true">#</a> 2. toRef / toRefs</h3><ul><li><p><code>toRef</code> ：</p><ul><li><p>作用：把一个<code>reactive</code>对象中的某个属性变成<code>ref</code>对象</p></li><li><p>语法：<code>const x = toRef(reactive(obj),&#39;key&#39;)</code> // <code>x.value</code></p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&quot;qq&quot;</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token function">toRef</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isRef</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">//true</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>toRefs</code>：</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&quot;qq&quot;</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">let</span> info <span class="token operator">=</span> <span class="token function">toRefs</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isRef</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment">//true</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isRef</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">//true</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isRef</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">//true</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_3-unref" tabindex="-1"><a class="header-anchor" href="#_3-unref" aria-hidden="true">#</a> 3. unref</h3><p>用于返回一个值</p><p>如果访问的是<code>ref</code>变量，则返回其<code>.value</code>，如果不是<code>ref</code>变量，则直接返回</p><h3 id="_4-shallowref" tabindex="-1"><a class="header-anchor" href="#_4-shallowref" aria-hidden="true">#</a> 4. shallowRef</h3><ul><li>作用：对复杂的对象，只将第一层变成<code>ref</code>响应</li><li>语法：<code>const x = shallowRef({a:{b:{c:1}},d:2})</code> , 如此a、b、c、d变化都不会自动更新，需要借助 <code>triggerRef</code> 来强制更新</li></ul><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">let</span> info <span class="token operator">=</span> <span class="token function">shallowRef</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">a</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token literal-property property">b</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token literal-property property">c</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token literal-property property">d</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isRef</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment">//true</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isRef</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span>value<span class="token punctuation">.</span>a<span class="token punctuation">.</span>b<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">//false</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isRef</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">//false</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isRef</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">//false</span>

  <span class="token keyword">const</span> <span class="token function-variable function">changeC</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    info<span class="token punctuation">.</span>value<span class="token punctuation">.</span>a<span class="token punctuation">.</span>b<span class="token punctuation">.</span>c<span class="token operator">++</span>
    <span class="token function">triggerRef</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span>   <span class="token comment">//强制渲染更新</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-triggerref" tabindex="-1"><a class="header-anchor" href="#_5-triggerref" aria-hidden="true">#</a> 5. triggerRef</h3><p>强制渲染<code>shallowRef</code>对象更新</p><h3 id="_6-readonly-shallowrwadonly" tabindex="-1"><a class="header-anchor" href="#_6-readonly-shallowrwadonly" aria-hidden="true">#</a> 6. readonly / shallowRwadonly</h3><ul><li><p><code>readonly</code> ：接收一个响应式数据然后重新赋值，返回的数据不允许修改（深层只读）</p></li><li><p><code>shallowRwadonly</code>：浅层只读（第一层只读，其余层可以修改）</p></li></ul><p><code>const x = readonly( ref对象 | reactive对象 | 普通对象 )</code> 只读</p><h3 id="_7-toraw-markraw" tabindex="-1"><a class="header-anchor" href="#_7-toraw-markraw" aria-hidden="true">#</a> 7. toRaw / markRaw</h3><ul><li><code>toRaw</code> ：将一个由 <code>reactive</code> 生成的响应式对象转为普通对象，如果在后续的操作中对数据进行添加的话，添加的数据也为响应式数据。</li><li><code>markRaw</code> ：进行<code>markRaw</code>操作后不会变为响应式数据，与 <code>readOnly</code> 不一样， 数据还是会发生改变。</li></ul><h3 id="_8-customref" tabindex="-1"><a class="header-anchor" href="#_8-customref" aria-hidden="true">#</a> 8. customRef</h3><p>自定义<code>ref</code>对象，防抖可用</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>// 自定义一个防抖函数
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
	<span class="token keyword">function</span> <span class="token function">myRef</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> times</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> timer
    <span class="token keyword">return</span> <span class="token function">customRef</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">track<span class="token punctuation">,</span> trigger</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
          <span class="token function">track</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token comment">// 通知 Vue 追踪 value 的变化</span>
          <span class="token keyword">return</span> value
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token function">set</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span><span class="token punctuation">{</span>
          <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>
          timer <span class="token operator">=</span> <span class="token function">setTimeut</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            value <span class="token operator">=</span> newValue
            <span class="token function">trigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment">// 通知 Vue 去重新解析模板</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span> times<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">let</span> kayWord <span class="token operator">=</span> <span class="token function">myRef</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>   <span class="token comment">// 使用自定义 myRef</span>
  <span class="token keyword">return</span> kayWord
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9-响应式判断" tabindex="-1"><a class="header-anchor" href="#_9-响应式判断" aria-hidden="true">#</a> 9. 响应式判断</h3><h4 id="_9-1-isref" tabindex="-1"><a class="header-anchor" href="#_9-1-isref" aria-hidden="true">#</a> 9.1 isRef</h4><p>判断一个变量是否是 <code>ref</code> 对象</p><h4 id="_9-2-isreadonly" tabindex="-1"><a class="header-anchor" href="#_9-2-isreadonly" aria-hidden="true">#</a> 9.2 isReadonly</h4><p>判断一个变量是不是只读的</p><h4 id="_9-3-isreactive" tabindex="-1"><a class="header-anchor" href="#_9-3-isreactive" aria-hidden="true">#</a> 9.3 isReactive</h4><p>判断一个变量是不是<code>reactive</code>的</p><h4 id="_9-4-isproxy" tabindex="-1"><a class="header-anchor" href="#_9-4-isproxy" aria-hidden="true">#</a> 9.4 isProxy</h4><p>判断一个变量是不是<code>reactive</code>或者<code>readonly</code>的</p>`,31);function c(l,i){return s(),a("div",null,[e(" more "),o])}const r=n(p,[["render",c],["__file","组合API.html.vue"]]);export{r as default};
