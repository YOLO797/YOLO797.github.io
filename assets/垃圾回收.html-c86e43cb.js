import{_ as n,W as a,X as s,Y as e,a1 as t}from"./framework-b609eea8.js";const p={},i=t(`<h2 id="_1-概念" tabindex="-1"><a class="header-anchor" href="#_1-概念" aria-hidden="true">#</a> 1. 概念</h2><p>垃圾回收机制（GC）</p><h3 id="_1-1-何为垃圾" tabindex="-1"><a class="header-anchor" href="#_1-1-何为垃圾" aria-hidden="true">#</a> 1.1 何为垃圾</h3><ul><li>对象不再被引用时就是垃圾</li><li>对象不能从根上访问到时就是垃圾（对象不是可达对象 = 垃圾）</li></ul><h3 id="_1-2-可达对象" tabindex="-1"><a class="header-anchor" href="#_1-2-可达对象" aria-hidden="true">#</a> 1.2 可达对象</h3><ul><li>可以访问到的对象（通过引用、作用域链可以直接查找到）</li><li>从根出发看是否能被找到</li><li>根可以理解为全局变量对象（全局执行上下文）</li></ul><h2 id="_2-gc算法" tabindex="-1"><a class="header-anchor" href="#_2-gc算法" aria-hidden="true">#</a> 2. GC算法</h2><h3 id="_2-1-引用计数" tabindex="-1"><a class="header-anchor" href="#_2-1-引用计数" aria-hidden="true">#</a> 2.1 引用计数</h3><p>​ 通过<mark>一个数字</mark>判断当前对象是不是垃圾。</p><ul><li><strong>工作原理：</strong><ul><li>跟踪记录每个值被引用的次数</li></ul></li><li><strong>工作流程：</strong><ul><li>声名一个变量，并将一个值赋值给这个变量，这个引用类型值的引用次数就是1</li><li>同一个值又被赋值给另一个变量，这个引用类型值的引用次数就 +1</li><li>当包含这个引用类型值的变量又被赋值给另外一个值，那么这个引用类型值的引用次数 -1</li><li>当引用次数为 0 时，就说明没有访问这个值</li><li>当垃圾收集器下一次运行时，就会释放引用次数为 0 的值所占的内存</li></ul></li><li>内存泄漏：如果一个值不再需要了，引用计数不为 0 ，垃圾回收机制无法释放这块内存</li></ul><h3 id="_2-2-标记清除" tabindex="-1"><a class="header-anchor" href="#_2-2-标记清除" aria-hidden="true">#</a> 2.2 标记清除</h3><p>​ 在GC工作时给活动对象<mark>添加一个标记</mark>，来判断他是否是一个垃圾</p><ul><li><strong>工作原理：</strong><ul><li>当变量进入进入环境时，就标记这个变量 &quot;进入环境&quot;</li><li>进入环境的变量所占用的内存就不能释放</li><li>当变量离开环境时，则标记为 ”离开环境“，回收内存</li></ul></li><li><strong>工作流程：</strong><ul><li>垃圾回收程序运行时，会标记内存中的所有变量</li><li>去掉所有在上下文中的变量以及被在上下文中的变量引用的变量的标记</li><li>被标记的变量就是待删除的变量，原因是任何上下文中的变量都访问不到它们</li><li>随后垃圾回收程序做一次内存清理，销毁代表及的所有值并收回它们的内存</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> m <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token number">2</span>  <span class="token comment">// 把 m,n,add() 标记为进入环境</span>
<span class="token function">add</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> n<span class="token punctuation">)</span>         <span class="token comment">// 把 x,y,z 标记为进入环境</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>    <span class="token comment">// x,y,z 离开环境，等待垃圾回收</span>
<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  x<span class="token operator">++</span>
  <span class="token keyword">var</span> z <span class="token operator">=</span> x <span class="token operator">+</span> y
  <span class="token keyword">return</span> z
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-标记整理" tabindex="-1"><a class="header-anchor" href="#_2-3-标记整理" aria-hidden="true">#</a> 2.3 标记整理</h3><h3 id="_2-4-分代回收" tabindex="-1"><a class="header-anchor" href="#_2-4-分代回收" aria-hidden="true">#</a> 2.4 分代回收</h3><h2 id="_3-常见情况" tabindex="-1"><a class="header-anchor" href="#_3-常见情况" aria-hidden="true">#</a> 3. 常见情况</h2><h3 id="_3-1-意外的全局变量" tabindex="-1"><a class="header-anchor" href="#_3-1-意外的全局变量" aria-hidden="true">#</a> 3.1 意外的全局变量</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">arg</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  bar <span class="token operator">=</span> <span class="token string">&#39;xxxxxxx&#39;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>bar <span class="token operator">=</span> <span class="token string">&#39;xxxxxxx&#39;</span>
<span class="token punctuation">}</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-定时器" tabindex="-1"><a class="header-anchor" href="#_3-2-定时器" aria-hidden="true">#</a> 3.2 定时器</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> someResource <span class="token operator">=</span> <span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  <span class="token keyword">var</span> node <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;node&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">{</span>
    node<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>someResource<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>

<span class="token comment">// 如果 id 为 node 的元素从 DOM 中移除，该定时器还是会存在，因为回调函数中包含对 someResource 的引用，定时器外面的 someResource 也不会被释放</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-闭包" tabindex="-1"><a class="header-anchor" href="#_3-3-闭包" aria-hidden="true">#</a> 3.3 闭包</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">bindEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">var</span> obj <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;xxx&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">var</span> <span class="token function-variable function">used</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">&quot;闭包内引用 obj ，obj 不会被释放&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  obj <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token comment">// 解决办法</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,23);function o(c,l){return a(),s("div",null,[e(" more "),i])}const r=n(p,[["render",o],["__file","垃圾回收.html.vue"]]);export{r as default};
