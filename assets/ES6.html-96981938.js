import{_ as t,W as o,X as p,Y as c,$ as n,a0 as s,Z as i,a1 as a,C as l}from"./framework-b609eea8.js";const d={},u=a("<p>一些数组方法，如 <code>forEach</code>、<code>map</code>、<code>filter</code>、<code>some</code>、<code>every</code>、<code>find</code>、<code>reduce</code> 等</p>",1),r=a(`<h2 id="_1-箭头函数和普通函数" tabindex="-1"><a class="header-anchor" href="#_1-箭头函数和普通函数" aria-hidden="true">#</a> 1. 箭头函数和普通函数</h2><div class="hint-container info"><p class="hint-container-title">参考答案</p><ul><li>没有 <code>this</code> ，所以需要通过查找作用域链来确定 <code>this</code> 的值</li><li>没有 <code>arguments</code> ，但是箭头函数可以访问外围函数的 <code>arguments</code> 对象</li><li>不能通过 <code>new</code> 关键字调用</li><li>没有原型 <code>prototype</code></li><li>没有 <code>super</code></li></ul></div><h2 id="_2-数组新增扩展" tabindex="-1"><a class="header-anchor" href="#_2-数组新增扩展" aria-hidden="true">#</a> 2. 数组新增扩展</h2><h3 id="_2-1-扩展运算符" tabindex="-1"><a class="header-anchor" href="#_2-1-扩展运算符" aria-hidden="true">#</a> 2.1 扩展运算符</h3><h3 id="_2-2-构造函数新增方法" tabindex="-1"><a class="header-anchor" href="#_2-2-构造函数新增方法" aria-hidden="true">#</a> 2.2 构造函数新增方法</h3><h4 id="array-from" tabindex="-1"><a class="header-anchor" href="#array-from" aria-hidden="true">#</a> Array.from()</h4><ul><li><p>将类似数组的对象或可遍历对象转为真正的数组</p></li><li><p>可以接收第二个参数，用来对每个元素进行处理，将处理后的值放入返回的数组</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token parameter">x</span><span class="token operator">=&gt;</span>x<span class="token operator">*</span>x<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h4 id="array-of" tabindex="-1"><a class="header-anchor" href="#array-of" aria-hidden="true">#</a> Array.of()</h4><ul><li><p>用于将一组值，转换为数组</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Arrof<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>   <span class="token comment">// [1,2,3]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>没有参数时，返回一个空数组</p><p>当参数只有一个时，实际上是指定数组的长度</p><p>参数个数不少于两个时，<code>Array()</code> 才会返回由参数组成的新数组</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment">// []</span>
<span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>       <span class="token comment">// [,,,]</span>
<span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span>  <span class="token comment">// [3,11,8]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_2-3-实例对象新增方法" tabindex="-1"><a class="header-anchor" href="#_2-3-实例对象新增方法" aria-hidden="true">#</a> 2.3 实例对象新增方法</h3><div class="hint-container info"><p class="hint-container-title">参考答案</p><ul><li>copyWithin()</li><li>find()、findIndex()</li><li>fill()</li><li>keys()、values()、entries()</li><li>includes()</li><li>flat()、flatMap()</li></ul></div><h4 id="copywithin" tabindex="-1"><a class="header-anchor" href="#copywithin" aria-hidden="true">#</a> copyWithin()</h4><p>将指定位置的成员复制到其他位置（会覆盖原有的成员），然后返回当前数组</p><p>参数：</p><ul><li>target（必选）：从该位置开始替换数据</li><li>start（可选）：从该位置开始读取数据</li><li>end（可选）：到该位置停止读取数据</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">copyWithin</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment">// [4,5,3,4,5]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="find-、findindex" tabindex="-1"><a class="header-anchor" href="#find-、findindex" aria-hidden="true">#</a> find()、findIndex()</h4><p><code>find()</code> ：找出第一个符合条件的数组成员</p><p><code>findIndex()</code>：找出第一个符合条件的数组成员的索引，都不符合返回 -1</p><h4 id="fill" tabindex="-1"><a class="header-anchor" href="#fill" aria-hidden="true">#</a> fill()</h4><p><code>fill(填充值，起始位置，结束位置)</code>：使用给定值填充一个数组，起始位置和结束位置可选</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>        <span class="token comment">// [7,7,7]</span>
<span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>   <span class="token comment">// [7,7,7]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="keys-、values-、entries" tabindex="-1"><a class="header-anchor" href="#keys-、values-、entries" aria-hidden="true">#</a> keys()、values()、entries()</h4><p><code>keys()</code>：对键名的遍历</p><p><code>values()</code>：对键值的遍历</p><p><code>entries()</code>：对键值对的遍历</p><h4 id="includes" tabindex="-1"><a class="header-anchor" href="#includes" aria-hidden="true">#</a> includes()</h4><p><code>includes()</code>：用于判断数组是否包含给定的值，返回 <code>true</code>/<code>false</code></p><h4 id="flat-、flatmap" tabindex="-1"><a class="header-anchor" href="#flat-、flatmap" aria-hidden="true">#</a> flat()、flatMap()</h4><p>扁平化处理</p><p><code>flat(拉平层数)</code>：默认不填只会 “拉平”一层</p><p><code>flatMap()</code>：对原数组的每个成员执行一个函数相当于执行 <code>Array.prototype.map()</code>，然后对返回的数组执行 <code>flat()</code> 方法。返回一个新数组，不改变原数组</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>x <span class="token punctuation">,</span> x<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">// [2,4,3,6,4,8]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_3-对象新增扩展" tabindex="-1"><a class="header-anchor" href="#_3-对象新增扩展" aria-hidden="true">#</a> 3.对象新增扩展</h2><h3 id="_3-1-属性简写" tabindex="-1"><a class="header-anchor" href="#_3-1-属性简写" aria-hidden="true">#</a> 3.1 属性简写</h3><h3 id="_3-2-super关键字" tabindex="-1"><a class="header-anchor" href="#_3-2-super关键字" aria-hidden="true">#</a> 3.2 super关键字</h3><p>指向当前对象的原型对象</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> proto <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token string">&#39;hello&#39;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token string">&#39;world&#39;</span><span class="token punctuation">,</span>
  <span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span>foo
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> proto<span class="token punctuation">)</span>   <span class="token comment">// 为obj设置原型对象</span>
obj<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// &#39;hello&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-属性的遍历" tabindex="-1"><a class="header-anchor" href="#_3-3-属性的遍历" aria-hidden="true">#</a> 3.3 属性的遍历</h3><ul><li><code>for...in</code>：</li><li><code>Object.keys(obj)</code>：</li><li><code>Object.getOwnPropertyNames(obj)</code></li><li><code>Object.getOwnPrototypeSymbols(obj)</code></li><li><code>Reflect.ownKeys(obj)</code>：返回一个数组，包含对象自身的所有键名，不管是 <code>Symbol</code>还是字符串</li></ul><h3 id="_3-4-对象新增方法" tabindex="-1"><a class="header-anchor" href="#_3-4-对象新增方法" aria-hidden="true">#</a> 3.4 对象新增方法</h3><p>对象新增方法：</p>`,42),k={href:"http://Object.is",target:"_blank",rel:"noopener noreferrer"},m=n("li",null,"Object.assign()",-1),v=n("li",null,"Object.keys()，Object.values()，Object.entries()",-1),h=a(`<h2 id="_4-set、map、weakset、weakmap" tabindex="-1"><a class="header-anchor" href="#_4-set、map、weakset、weakmap" aria-hidden="true">#</a> 4. Set、Map、WeakSet、WeakMap</h2><h3 id="_4-1-set" tabindex="-1"><a class="header-anchor" href="#_4-1-set" aria-hidden="true">#</a> 4.1 Set</h3><p><code>Set</code> 类似于数组，但成员值是 <strong>唯一</strong> 的，没有重复的值。可用于数组去重</p><p>遍历：</p><ul><li><code>keys()</code>：返回键名的遍历器</li><li><code>values()</code>：返回键值的遍历器</li><li><code>entries()</code>：返回键值对的遍历器</li><li><code>forEach()</code>：使用回调函数遍历每个成员</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

s<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment">// 2 只被添加一次   [1,2]</span>
s<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment">// 返回一个布尔值</span>
s<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
s<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// 清除所有成员</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-map" tabindex="-1"><a class="header-anchor" href="#_4-2-map" aria-hidden="true">#</a> 4.2 Map</h3><p><code>Map</code> 类型是 <strong>键值对的有序列表</strong> ，而键和值都可以是任意类型</p><p>属性和操作方法：</p><ul><li><code>size</code>属性</li><li><code>set()</code>：设置键名 <code>key</code> 对应的键值 <code>value</code> ，然后返回整个 <code>Map</code> 结构</li><li><code>get()</code>：读取 <code>key</code> 对应的键值，找不到 <code>key</code>，返回 <code>undefined</code></li><li><code>has()</code>：返回一个布尔值，表示某个键是否在当前 <code>Map</code>对象上</li><li><code>delete()</code>：删除某个键，返回 <code>true</code>，失败返回 <code>false</code></li><li><code>clear()</code>：清除所有成员，无返回值</li></ul><p>遍历：</p><ul><li><code>keys()</code>：返回键名的遍历器</li><li><code>values()</code>：返回键值的遍历器</li><li><code>entries()</code>：返回所有成员的遍历器</li><li><code>forEach()</code>：遍历 <code>Map</code>的所有成员</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

m<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;aaa&#39;</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span>
m<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span>  <span class="token comment">// 链式操作</span>

m<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;aaa&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-weakset" tabindex="-1"><a class="header-anchor" href="#_4-3-weakset" aria-hidden="true">#</a> 4.3 WeakSet</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakSet</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>   <span class="token comment">// WeakSet{[1,2],[3,4]}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong><code>WeakSet</code>与<code>Set</code> 的区别？</strong></p><div class="hint-container info"><p class="hint-container-title">参考答案</p><ul><li><code>WeakSet</code> <strong>只能储存对象引用</strong>，不能存放值，而 <code>Set</code> 可以</li><li>没有 <code>size</code> 属性</li><li><code>WeakSet</code> 对象<strong>无法遍历</strong>，对象值都是弱引用，即垃圾回收机制不考虑 WeakSet 对该对象的应用</li></ul></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 成员不是引用类型</span>
<span class="token keyword">let</span> weakSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakSet</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>weakSet<span class="token punctuation">)</span>   <span class="token comment">// 报错</span>

<span class="token comment">// 成员为引用类型</span>
<span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">}</span>
<span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">}</span>
<span class="token keyword">let</span>  weakSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakSet</span><span class="token punctuation">(</span><span class="token punctuation">[</span>obj1<span class="token punctuation">,</span>obj2<span class="token punctuation">]</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>weakSet<span class="token punctuation">)</span>  <span class="token comment">//  WeakSet{{name: 1},{name: 2}}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-4-weakmap" tabindex="-1"><a class="header-anchor" href="#_4-4-weakmap" aria-hidden="true">#</a> 4.4 WeakMap</h3><p><strong><code>WeakMap</code>与<code>Map</code>的区别？</strong></p><div class="hint-container info"><p class="hint-container-title">参考答案</p><ul><li><p><code>WeakMap</code> 只接受<strong>对象作为键名</strong>（ <code>null</code> 除外 ），不能接受其他类型的值作为键名</p></li><li><p><code>WeakMap</code> 的键名所指向的对象，不计入垃圾回收机制</p><p>一旦不再需要，里面的键名对象和所对应的键值对会自动消失，不用手动删除引用</p></li><li><p><code>WeakMap</code> <strong>没有遍历操作</strong>，不能取到键名</p></li><li><p><code>WeakMap</code> <strong>无法清空，不支持 <code>clear</code> 方法</strong>，只有 <strong><code>get()</code>、<code>set()</code>、<code>has()</code>、<code>delete()</code></strong></p></li></ul></div><h2 id="_5-generator" tabindex="-1"><a class="header-anchor" href="#_5-generator" aria-hidden="true">#</a> 5.Generator</h2><p><code>Generator</code> 函数</p><ul><li><code>function</code> 关键字与函数名之间有一个星号</li><li>函数体内部使用 <code>yield</code> 表达式，定义不同的内部状态</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">helloGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">yield</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">yield</span> <span class="token string">&#39;world&#39;</span>
  <span class="token keyword">return</span> <span class="token string">&#39;ending&#39;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> hw <span class="token operator">=</span> <span class="token function">helloGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

hw<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment">// {value: &#39;hello&#39;, done: false}</span>
hw<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment">// {value: &#39;world&#39;, done: false}</span>
hw<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment">// {value: &#39;ending&#39;, done: true}</span>
hw<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment">// {value: undefined, done: true}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>done</code> ：判断是否存在下个状态</p><p><code>value</code>：对应状态值</p><p><code>yield</code> 表达式本身没有返回值，或者说总是返回 <code>undefined</code></p><p>通过调用 <code>next</code> 方法可以带一个参数，该参数会被当作上一个 <code>yield</code> 表达式的返回值</p><p><strong><code>Promise</code> 、<code>Generator</code>、<code>async/await</code>区别：</strong></p><div class="hint-container info"><p class="hint-container-title">参考答案</p><ul><li><code>promise</code> 和 <code>async/await</code> 是专门用来处理异步操作的</li><li><code>promise</code> 相比 <code>async/await</code> 、<code>generator</code> 更复杂化，且可读性也稍差</li><li><code>async/await</code> 、<code>generator</code> 需要与 <code>promise</code> 搭配处理异步情况</li><li><code>async/await</code> 是 <code>generator</code> 的语法糖，相当于 会自动执行 <code>generator</code> 函数</li><li><code>async/await</code> 使用上更简洁，将异步代码以同步的形式进行编写，是处理异步编程的最终方案</li></ul></div>`,31);function b(f,g){const e=l("ExternalLinkIcon");return o(),p("div",null,[u,c(" more "),r,n("ul",null,[n("li",null,[n("a",k,[s("Object.is"),i(e)]),s("()")]),m,v]),h])}const w=t(d,[["render",b],["__file","ES6.html.vue"]]);export{w as default};
