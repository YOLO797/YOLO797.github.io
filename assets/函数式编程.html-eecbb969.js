import{_ as a,W as e,X as i,Y as r,$ as l,a1 as n}from"./framework-b609eea8.js";const s={},d=l("p",null,"主要的编程范式有三种：命令式编程，声明式编程和函数式编程",-1),t=n(`<h2 id="_1-是什么" tabindex="-1"><a class="header-anchor" href="#_1-是什么" aria-hidden="true">#</a> 1. 是什么</h2><p>编程范式：</p><ul><li>命令式编程</li><li>声明式编程</li><li>函数式编程</li></ul><p>相比命令式编程，函数式编程更加强调执行的结果而非执行的过程。</p><h2 id="_2-概念" tabindex="-1"><a class="header-anchor" href="#_2-概念" aria-hidden="true">#</a> 2. 概念</h2><h3 id="_2-1-纯函数" tabindex="-1"><a class="header-anchor" href="#_2-1-纯函数" aria-hidden="true">#</a> 2.1 纯函数</h3><p>无副作用的函数。</p><p>纯函数是给定的输入返还相同输出的函数，并且要求你所有的数据都是不可变的，即 <strong>纯函数 = 无状态 + 数据不可变</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token function-variable function">double</span> <span class="token operator">=</span> <span class="token parameter">value</span> <span class="token operator">=&gt;</span> value <span class="token operator">*</span> <span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="特性" tabindex="-1"><a class="header-anchor" href="#特性" aria-hidden="true">#</a> 特性：</h4><ul><li>函数内部传入指定的值，就会返回确定唯一的值</li><li>不会造成超出作用域的变化，例如修改全局变量或引用传递的参数</li></ul><h4 id="优势" tabindex="-1"><a class="header-anchor" href="#优势" aria-hidden="true">#</a> 优势：</h4><ul><li>使用纯函数，可以产生可测试的代码</li><li>不依赖外部环境计算，不会产生副作用，体改函数复用性</li><li>可读性变强</li></ul><h3 id="_2-2-高阶函数" tabindex="-1"><a class="header-anchor" href="#_2-2-高阶函数" aria-hidden="true">#</a> 2.2 高阶函数</h3><p>以函数作为输入或者输出的函数</p><p>通过接受其他函数作为参数 ，或者返回其他函数的函数</p><p>高阶函数存在缓存的特性，主要利用闭包作用</p><h2 id="_3-优缺点" tabindex="-1"><a class="header-anchor" href="#_3-优缺点" aria-hidden="true">#</a> 3.优缺点</h2><h4 id="优点" tabindex="-1"><a class="header-anchor" href="#优点" aria-hidden="true">#</a> 优点：</h4><ul><li>更好的管理状态：因为它的宗旨是无状态，或者更少的状态，能最大的减少这些未知、优化代码、减少出错情况。</li><li>更简单的复用：固定输入 -&gt; 固定输出，没有其他外部变量影响，并且无副作用。</li><li>更优雅的组合：往大的说，网页由各个组件组成。往小的说，一个函数也可能由多个小函数组成。更强的复用性，带来更强大的组合性。</li><li>隐形好处：减少代码量，提高维护性。</li></ul><h4 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点" aria-hidden="true">#</a> 缺点：</h4><ul><li>性能</li><li>资源占用：在JS中为了实现对象状态的不可变，往往会创建新的对象。因此，它对垃圾回收所产生的压力远远超过其他编程方式</li><li>递归陷进：在函数式编程中，为了实现迭代，通常会采用递归操作</li></ul>`,22);function h(c,o){return e(),i("div",null,[d,r(" more "),t])}const u=a(s,[["render",h],["__file","函数式编程.html.vue"]]);export{u as default};
