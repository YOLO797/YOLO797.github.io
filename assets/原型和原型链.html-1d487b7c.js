import{_ as o,W as e,X as n,Y as a,$ as s,a1 as t}from"./framework-b609eea8.js";const c={},r=s("p",null,"实例对象（object）都有一个私有属性（__ proto __）指向它的构造函数的原型对象（prototype），该原型对象也有自己的proto，层层向上查找，直到找到一个对象的原型为 null ，结束。",-1),p=t(`<h2 id="_1-构造函数创建对象" tabindex="-1"><a class="header-anchor" href="#_1-构造函数创建对象" aria-hidden="true">#</a> 1. 构造函数创建对象</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
person<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;tom&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Person</code> ------ 构造函数</p><p><code>person</code> ------<code>new</code> 创建的一个实例对象</p><p><strong>构造函数创建一个实例的过程：</strong></p><ol><li>创建一个新对象</li><li>将构造函数的作用域赋值给新对象（<code>this</code> 就指向了新对象）</li><li>执行构造函数中的代码（为新对象添加实例属性和实例方法）</li><li>返回新对象</li></ol><h2 id="_2-三大属性" tabindex="-1"><a class="header-anchor" href="#_2-三大属性" aria-hidden="true">#</a> 2. 三大属性</h2><p><code>JS</code> 的每个函数在创建的时候，都会生成一个属性 <mark><code>prototype</code></mark>，这个属性指向一个对象，这个对象就是此函数的<mark>原型对象</mark>。该原型对象中有个属性为 <code>constructor</code> 指向该函数。</p><ul><li>对象独有的属性： <ul><li><code>__proto__</code></li><li><code>constructor</code></li></ul></li><li>函数独有的属性（函数也是对象）： <ul><li><code>prototype</code></li><li><code>__proto__</code></li><li><code>constructor</code></li></ul></li></ul><h3 id="_2-1-prototype" tabindex="-1"><a class="header-anchor" href="#_2-1-prototype" aria-hidden="true">#</a> 2.1 prototype</h3><h3 id="_2-2-proto" tabindex="-1"><a class="header-anchor" href="#_2-2-proto" aria-hidden="true">#</a> 2.2 <strong>proto</strong></h3><ul><li><code>person1.__proto__ === Person.prototype</code></li><li><code>person1.constructor === Person</code></li><li><code>Person.prototype.constructor === Person</code></li></ul><h3 id="_2-3-constructor" tabindex="-1"><a class="header-anchor" href="#_2-3-constructor" aria-hidden="true">#</a> 2.3 constructor</h3><h2 id="_3-原型链" tabindex="-1"><a class="header-anchor" href="#_3-原型链" aria-hidden="true">#</a> 3. 原型链</h2><p>从实例对象开始，通过 <code>__proto__</code> 链接子父类对象，一层层查找对象自身拥有或继承的属性和方法，直到找到 <code>null</code></p>`,15);function i(l,d){return e(),n("div",null,[r,a(" more "),p])}const _=o(c,[["render",i],["__file","原型和原型链.html.vue"]]);export{_ as default};
