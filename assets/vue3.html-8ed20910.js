import{_ as e,W as o,X as c,Y as l,$ as n,a0 as s,Z as p,a1 as a,C as i}from"./framework-b609eea8.js";const u={},r=n("p",null,[n("strong",null,"Vue3"),s(" 的生命周期详述")],-1),k=a(`<h2 id="_1-vue3-生命周期" tabindex="-1"><a class="header-anchor" href="#_1-vue3-生命周期" aria-hidden="true">#</a> 1. Vue3 生命周期</h2><h3 id="_1-1-生命周期" tabindex="-1"><a class="header-anchor" href="#_1-1-生命周期" aria-hidden="true">#</a> 1.1 生命周期</h3><ul><li><code>beforeCreate</code> =====&gt; 使用 <code>setup()</code></li><li><code>created</code> ==========&gt; 使用 <code>setup()</code></li><li><code>beforeMount</code> ======&gt; <code>onBeforeMount</code></li><li><code>mounted</code> ==========&gt; <code>onMounted</code></li><li><code>beforeUpdate</code> =====&gt; <code>onBeforeUpdate</code></li><li><code>updated</code> ==========&gt; <code>onUpdated</code></li><li><code>beforeDestroy</code> ====&gt; <code>onBeforeUnmount</code></li><li><code>destroyed</code> ========&gt; <code>onUnmounted</code></li><li><code>errorCaptured</code> ====&gt; <code>onErrorCaptured</code></li></ul><h4 id="_1-2-new-set" tabindex="-1"><a class="header-anchor" href="#_1-2-new-set" aria-hidden="true">#</a> 1.2 new Set()</h4><p>接收一个数组，返回一个新的对象</p><ol><li><p>属性：</p><ul><li>size ：返回集合种所包含元素的数量</li></ul></li><li><p>场景：</p><ul><li><p>数组去重 <code>[...new Set(arr)]</code></p></li><li><p>并集 <code>[...new Set([...a,...b])]</code></p></li><li><p>交集 <code>[...new Set([...a].filter(x=&gt;b.has(x)))]</code></p></li><li><p>查集 <code>[Array.from(new Set([...a].filter(x=&gt;!b.has(x))))</code></p></li></ul></li></ol><h4 id="setup" tabindex="-1"><a class="header-anchor" href="#setup" aria-hidden="true">#</a> setup</h4><p><strong>setup 函数</strong></p><ol><li><p>Composition API（组合API）的入口；</p></li><li><p>在 setup 函数中定义的变量和方法最后都需要 return 出去，不然无法再模板中使用；</p></li><li><p>在beforeCreate钩子之前被调用</p></li><li><p>this 不可用，打印为 undefined</p></li><li><p>接收props作为第一个参数，watchEffect/watch 观察和相应props的更新 context 提供一个上下文对象</p></li></ol><p><strong>setup语法糖：<code>&lt;script setup&gt; &lt;/script&gt;</code></strong></p><h5 id="组件" tabindex="-1"><a class="header-anchor" href="#组件" aria-hidden="true">#</a> 组件</h5><p>​ 组件直接引入即可使用，无需注册</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Foo</span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">import</span> Foo <span class="token keyword">from</span> <span class="token string">&#39;./components/Foo.vue&#39;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="属性和方法" tabindex="-1"><a class="header-anchor" href="#属性和方法" aria-hidden="true">#</a> 属性和方法</h5><p>​ 属性和方法无需挂载到对象上后再次返回</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>increment<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span>{{ count }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">import</span> <span class="token punctuation">{</span>ref<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
    
    <span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> <span class="token function-variable function">increment</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> count<span class="token punctuation">.</span>value<span class="token operator">++</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="props" tabindex="-1"><a class="header-anchor" href="#props" aria-hidden="true">#</a> props</h5><p>​ <code> defineProps</code> ：用来接收父组件传来的 props</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">import</span> <span class="token punctuation">{</span> defineProps <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
    <span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token function">defineProps</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">list</span><span class="token operator">:</span> Array<span class="token punctuation">,</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">type</span><span class="token operator">:</span> String
            <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        	<span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">&#39;tom&#39;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">import</span> <span class="token punctuation">{</span> ref<span class="token punctuation">,</span>defineProps <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
    type Props <span class="token operator">=</span> <span class="token punctuation">{</span>
        msg：string<span class="token punctuation">;</span>
        age<span class="token operator">?</span><span class="token operator">:</span> number<span class="token punctuation">;</span> <span class="token comment">//可选  </span>
        <span class="token comment">// 如果想设置可选参数的默认值，使用 withDefaults</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//defineProps返回的是一个对象，所以尖括号里面的类型要用{}包括</span>
    defineProps<span class="token operator">&lt;</span>Props<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​</p><h5 id="withdefaults" tabindex="-1"><a class="header-anchor" href="#withdefaults" aria-hidden="true">#</a> withDefaults</h5><p>​ 在使用TS类型系统时，可以指定props的默认值。</p><p>​ withDefaults( props, defaultValues )</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>// 方法一
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">import</span> <span class="token punctuation">{</span> defineProps <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
    <span class="token function">withDefaults</span><span class="token punctuation">(</span>defineProps<span class="token operator">&lt;</span><span class="token punctuation">{</span>
        size<span class="token operator">?</span><span class="token operator">:</span> number
        labels<span class="token operator">?</span><span class="token operator">:</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">{</span>
        <span class="token literal-property property">size</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
        <span class="token function-variable function">labels</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token string">&#39;default label&#39;</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

// 方法二
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">import</span> <span class="token punctuation">{</span> defineProps <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
    <span class="token comment">// 先通过 interface 定义一个类型接口</span>
    <span class="token keyword">interface</span> <span class="token class-name">Props</span><span class="token punctuation">{</span>
        msg<span class="token operator">?</span><span class="token operator">:</span> string
    <span class="token punctuation">}</span>
    <span class="token comment">//再作为入参传入</span>
    <span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token function">withDefaults</span><span class="token punctuation">(</span>defineProps<span class="token operator">&lt;</span>Props<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">{</span>
		<span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">&#39;hello&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>msg<span class="token punctuation">)</span> <span class="token comment">//hello</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="emits" tabindex="-1"><a class="header-anchor" href="#emits" aria-hidden="true">#</a> emits</h5><p>​ <code>defineEmits</code>：子组件向父组件事件传递/传值</p><p>​ 由于emit并非提供给模板直接来读取，所以需要通过字面量来定义emits</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>//子组件 Son
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>子组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>onClick<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span>点击给父组件传值<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">import</span> <span class="token punctuation">{</span> defineEmits <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
    <span class="token comment">// 获取emit</span>
    <span class="token comment">// 用defineEmits() 来定义子组件要抛出的方法，语法defineEmits([&#39;要抛出的方法&#39;])</span>
    <span class="token keyword">const</span> emit <span class="token operator">=</span> <span class="token function">defineEmits</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;onChange&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    
    <span class="token comment">// TS写法</span>
    <span class="token keyword">const</span> emit <span class="token operator">=</span> defineEmits<span class="token operator">&lt;</span><span class="token punctuation">{</span>
        <span class="token punctuation">(</span>e<span class="token operator">:</span> <span class="token string">&#39;sussess&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> string<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
    <span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    
    <span class="token comment">//调用emit</span>
    <span class="token keyword">const</span> <span class="token function-variable function">onClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
       <span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;onChange&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;Tom&#39;</span><span class="token punctuation">)</span> 
    <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

//父组件
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>父组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Son</span> <span class="token attr-name">@onChange</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>getData<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scrtpt</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span>
    import Son from &#39;./Son.vue&#39;
    const getData = (val)=&gt;{
    	console.log(&#39;接受的子组件的值&#39;, val)
    }
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scrtpt</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>onClick<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span>{{msg}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token comment">// vue2 写法</span>
    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">props</span><span class="token operator">:</span><span class="token punctuation">{</span>
            <span class="token literal-property property">msg</span><span class="token operator">:</span><span class="token punctuation">{</span>
                <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>
                <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>
        	<span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">&#39;onClick&#39;</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
    	<span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="defineexpose" tabindex="-1"><a class="header-anchor" href="#defineexpose" aria-hidden="true">#</a> defineExpose</h5><p>暴露出父组件要调用的方法</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>//子组件
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>子组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">import</span> <span class="token punctuation">{</span>ref<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
    
    <span class="token keyword">const</span> stext <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&#39;son-value&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> <span class="token function-variable function">sfunction</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;son-function&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    
    <span class="token function">defineExpose</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
		stext<span class="token punctuation">,</span>
        sfunction
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

//父组件
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>父组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Son</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sonDom<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>getSonDom<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>点击<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">import</span> <span class="token punctuation">{</span>ref<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
    <span class="token keyword">import</span> Son <span class="token keyword">from</span> <span class="token string">&#39;./son.vue&#39;</span>
    <span class="token keyword">const</span> sonDom <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>  <span class="token comment">//命名要和REF上面的名称一致</span>
    <span class="token keyword">const</span> <span class="token function-variable function">getSonDom</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;sonDom&#39;</span><span class="token punctuation">,</span> sonDom<span class="token punctuation">.</span>value<span class="token punctuation">.</span>stext<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="attrs和slots" tabindex="-1"><a class="header-anchor" href="#attrs和slots" aria-hidden="true">#</a> attrs和slots</h5><p>​ 在标准组件里，<code>attrs</code> 的数据是通过<code>setup</code>的第二个参数<code>context</code>里的<code>attrs</code> API获取的。</p><p>​ vue3中没有了context参数，所以需要使用 <code>useAttrs</code> 来拿到 <code>attrs</code> 数据。</p><p>​ 同理，使用 <code>useSlots</code> 获取插槽。</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">import</span> <span class="token punctuation">{</span> useSlots<span class="token punctuation">,</span> useAttrs <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
    <span class="token comment">// 获取 slots</span>
    <span class="token keyword">const</span> slots <span class="token operator">=</span> <span class="token function">useSlots</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">// 获取 attrs</span>
    <span class="token keyword">const</span> attrs <span class="token operator">=</span> <span class="token function">useAttrs</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    
    <span class="token comment">//attrs是个对象，需要通过key 来得到对应的单个 attr</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>attrs<span class="token punctuation">.</span>msg<span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="组件通讯" tabindex="-1"><a class="header-anchor" href="#组件通讯" aria-hidden="true">#</a> 组件通讯</h4><h5 id="父调用子的方法" tabindex="-1"><a class="header-anchor" href="#父调用子的方法" aria-hidden="true">#</a> 父调用子的方法</h5><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>// 父
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>handle<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>调用子组件的方法<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Child</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>alarmDetailRef<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">import</span> Child <span class="token keyword">from</span> <span class="token string">&#39;./Child.vue&#39;</span>
    <span class="token keyword">let</span> alarmDetailRef <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>
    <span class="token comment">// 调用子组件方法</span>
    <span class="token keyword">function</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        alarmDetailRef<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">childFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>// 子
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">function</span> <span class="token function">childFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token punctuation">}</span>
    <span class="token comment">//difineExpose 暴露出父组件要调用的方法</span>
    <span class="token function">difineExpose</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        childFn
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="父传子" tabindex="-1"><a class="header-anchor" href="#父传子" aria-hidden="true">#</a> 父传子</h5><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>// 父
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Child</span> <span class="token attr-name">:msg</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">&#39;</span>msg<span class="token punctuation">&#39;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">import</span> Child <span class="token keyword">from</span> <span class="token string">&#39;./Child.vue&#39;</span>
    <span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
    <span class="token keyword">let</span> msg <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&#39;父传子&#39;</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>// 子 Child.vue
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>{{ msg }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
    <span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token function">difineProps</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
		<span class="token literal-property property">msg</span><span class="token operator">:</span> String
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="子传父" tabindex="-1"><a class="header-anchor" href="#子传父" aria-hidden="true">#</a> 子传父</h5><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>// 父组件
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>子传父-{{ a }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Child</span> <span class="token attr-name">@fn</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>fn<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">import</span> Child <span class="token keyword">from</span> <span class="token string">&#39;./Child.vue&#39;</span>
    <span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		a<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">&quot;子组件触发父组件&quot;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>  <span class="token comment">// 接收的子组件传来的数据</span>
    <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>// 子组件 Child.vue
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>childClick<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{ msg }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
    <span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&#39;子传父&#39;</span><span class="token punctuation">)</span>
    
    <span class="token keyword">const</span> emits <span class="token operator">=</span> <span class="token function">defineEmits</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;childClick&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">function</span> <span class="token function">childClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">emits</span><span class="token punctuation">(</span><span class="token string">&quot;fn&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>uci</strong>-dashboard</p><p>uci-ui</p><p><code>TS</code> + <code>vite</code> + <code>vue3</code> + <code>pinia</code> + <code>vueRequest</code>（<code>graphQL</code>） + <code>vue-router4</code> + <code>Native-UI</code> + <code>xicons</code></p><p>架子 cli -&gt; git hub</p><h4 id="组合api" tabindex="-1"><a class="header-anchor" href="#组合api" aria-hidden="true">#</a> 组合API</h4><h5 id="ref-与-reactive" tabindex="-1"><a class="header-anchor" href="#ref-与-reactive" aria-hidden="true">#</a> ref 与 reactive</h5><p>​ ref ：定义基本数据类型，String/Boolean/Number</p><p>​ reactive ：定义响应式变量，用于复杂数据类型，如对象或数组</p><p><code>ref</code> 和 <code>reactive</code> 的区别</p><ol><li><p><code>ref</code> 用来定义 基本类型数据</p><p><code>reactive</code> 用来定义对象或数组类型数据</p></li><li><p><code>ref</code> 通过 <code>Object.defineProperty()</code> 中的<code>get</code> 和<code>set</code> 来实现响应式，</p><p><code>reactive</code> 通过使用 <code>Proxy</code> 来实现响应式</p></li><li><p><code>ref</code> 定义的数据：操作数据需要 <code>.value</code> ，读取数据时模板中直接读取不需要</p><p><code>reactive</code> 定义的数据：不需要 <code>.value</code></p></li></ol><h5 id="toref-与-torefs" tabindex="-1"><a class="header-anchor" href="#toref-与-torefs" aria-hidden="true">#</a> toRef 与 toRefs</h5><p>​ toRef ：</p><p>​ 作用：把一个reactive对象中的某个属性变成ref对象</p><p>​ 语法：<code>const x = toRef(reactive(obj),&#39;key&#39;) //x.value</code></p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&quot;qq&quot;</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token function">toRef</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isRef</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">//true</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​</p><p>​ toRefs：</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&quot;qq&quot;</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">let</span> info <span class="token operator">=</span> <span class="token function">toRefs</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isRef</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment">//true</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isRef</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">//true</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isRef</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">//true</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="unref" tabindex="-1"><a class="header-anchor" href="#unref" aria-hidden="true">#</a> unref</h5><p>​ 用于返回一个值，如果访问的是ref变量，则返回其.value；如果不是ref变量，则直接返回</p><h5 id="customref" tabindex="-1"><a class="header-anchor" href="#customref" aria-hidden="true">#</a> customRef</h5><p>​ 自定义ref对象，防抖可用</p><h5 id="shallowref" tabindex="-1"><a class="header-anchor" href="#shallowref" aria-hidden="true">#</a> shallowRef</h5><ul><li>作用：对复杂的对象，只将第一层变成ref响应</li><li>语法：<code>const x = shallowRef({a:{b:{c:1}},d:2})</code> , 如此a、b、c、d变化都不会自动更新，需要借助 <code>triggerRef</code> 来强制更新</li></ul><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">let</span> info <span class="token operator">=</span> <span class="token function">shallowRef</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">a</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token literal-property property">b</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token literal-property property">c</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token literal-property property">d</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isRef</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment">//true</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isRef</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span>value<span class="token punctuation">.</span>a<span class="token punctuation">.</span>b<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">//false</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isRef</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">//false</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isRef</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">//false</span>
    
    <span class="token keyword">const</span> <span class="token function-variable function">changeC</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
        info<span class="token punctuation">.</span>value<span class="token punctuation">.</span>a<span class="token punctuation">.</span>b<span class="token punctuation">.</span>c<span class="token operator">++</span>
        <span class="token function">triggerRef</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span>   <span class="token comment">//强制渲染更新</span>
    <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="triggerref" tabindex="-1"><a class="header-anchor" href="#triggerref" aria-hidden="true">#</a> triggerRef</h5><p>​ 强制渲染shallowRef对象更新</p><h5 id="readonly-与-shallowrwadonly" tabindex="-1"><a class="header-anchor" href="#readonly-与-shallowrwadonly" aria-hidden="true">#</a> readonly 与 shallowRwadonly</h5><p>​ readonly ：接收一个响应式数据然后重新赋值，返回的数据不允许修改（深层只读）</p><p>​ shallowRwadonly：浅层只读（第一层只读，其余层可以修改）</p><p>​ <code>const x = readonly( ref对象 | reactive对象 | 普通对象 )</code> 只读</p><h5 id="toraw与markraw" tabindex="-1"><a class="header-anchor" href="#toraw与markraw" aria-hidden="true">#</a> toRaw与markRaw</h5><p>​ <code>toRaw</code> ：将一个由 <code>reactive</code> 生成的响应式对象转为普通对象，如果在后续的操作中对数据进行添加的话，添加的数据也为响应式数据。</p><p>​ <code>markRaw</code> ：进行markRaw操作后不会变为响应式数据，与 <code>readOnly</code> 不一样， 数据还是会发生改变。</p><h5 id="computed" tabindex="-1"><a class="header-anchor" href="#computed" aria-hidden="true">#</a> computed()</h5><ul><li>作用：对响应式变量进行缓存计算，返回一个只读的响应式的ref对象</li><li>语法：<code>const c = computed(fn / {get,set})</code></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">computed</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>
	options<span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token function-variable function">get</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token constant">T</span>
        <span class="token function-variable function">set</span><span class="token operator">:</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token keyword">void</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token operator">:</span> Ref<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span>

<span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> text <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> name<span class="token punctuation">.</span>value
    <span class="token punctuation">}</span>
    <span class="token function">set</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>
    	name<span class="token punctuation">.</span>value <span class="token operator">=</span> val
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="响应式判断" tabindex="-1"><a class="header-anchor" href="#响应式判断" aria-hidden="true">#</a> 响应式判断</h5><p><code>isRef</code> ：判断一个变量是否是 ref 对象</p><p><code>isReadonly</code> ：判断一个变量是不是只读的</p><p><code>isReactive </code> ：判断一个变量是不是reactive的</p><p><code>isProxy</code> ：判断一个变量是不是reactive或者readonly的</p><h4 id="watch与watcheffect" tabindex="-1"><a class="header-anchor" href="#watch与watcheffect" aria-hidden="true">#</a> watch与watchEffect</h4><p><code>watchEffect</code> 和 <code>watch</code> 的区别：</p><ol><li><code>watch</code> 只有 <strong>监听</strong> 的值发生变化时才执行，<code>watchEffect</code> 每次只要代码加载时就会执行。（忽略 <code>watch</code> 的第三个参数配置项，如果修改配置项也可立马执行）</li><li><code>watch</code> 需要传递监听的对象，<code>watchEffect</code> 不需要</li><li><code>watch</code> 只能监听响应式数据：<code>ref</code> 定义的属性和 <code>reactive</code> 定义的对象，如果直接监听 <code>reactive</code> 定义对象中的属性是不允许的，除非使用函数转换。</li><li><code>watchEffect</code> 如果监听 <code>reactive</code> 定义的对象是不起作用的，只能监听对象中的属性</li><li><code>watchEffect</code> 无法获取到原值，只能得到变化后的值</li></ol><p><code>watchEffect</code> 立即运行一个函数，然后被动的追踪它的依赖，当这些依赖改变时重新执行该函数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// -&gt; logs 0</span>

count<span class="token punctuation">.</span>value<span class="token operator">++</span>
<span class="token comment">// -&gt; logs 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>watch</code> 侦测一个或者多个响应式数据源并在数据源变化时调用一个回调函数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token function">watch</span><span class="token punctuation">(</span>
	<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> state<span class="token punctuation">.</span>count<span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token parameter">count<span class="token punctuation">,</span> prevCount</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token operator">...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="mixin" tabindex="-1"><a class="header-anchor" href="#mixin" aria-hidden="true">#</a> Mixin</h4>`,97),d={href:"https://juejin.cn/post/7076340796361801759",target:"_blank",rel:"noopener noreferrer"},v=a(`<h5 id="vue2中的mixin" tabindex="-1"><a class="header-anchor" href="#vue2中的mixin" aria-hidden="true">#</a> vue2中的mixin</h5><p>​ 将组件的公共逻辑或者配置提取出来，哪个组件需要用时，直接将提取的这部分混入到组件内部即可。</p><h5 id="mixin-和-vuex的区别" tabindex="-1"><a class="header-anchor" href="#mixin-和-vuex的区别" aria-hidden="true">#</a> mixin 和 vuex的区别</h5><ul><li>vuex 公共状态管理，如果在一个组件中更改数据，其余引用的该数据一起更改。</li><li>mixin 中的数据和方法时独立的，组件之间使用后是互不影响的。</li></ul><h5 id="自定义mixin" tabindex="-1"><a class="header-anchor" href="#自定义mixin" aria-hidden="true">#</a> 自定义mixin</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// src/mixin/index.js</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> mixins <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="局部混入" tabindex="-1"><a class="header-anchor" href="#局部混入" aria-hidden="true">#</a> 局部混入</h5><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>//引入
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">import</span> <span class="token punctuation">{</span> mixins <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./mixin/index&#39;</span>
    <span class="token keyword">export</span> <span class="token keyword">default</span><span class="token punctuation">{</span>
		<span class="token literal-property property">mixins</span><span class="token operator">:</span><span class="token punctuation">[</span> mixins <span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>mixin 中的生命周期函数会和组件的生命周期函数一起合并执行。</li><li>mixin 中的data数据在组件中可以直接使用。</li><li>mixin 中的方法在组件中可以直接调用。</li><li>生命周期函数合并后执行顺序：先执行mixin 中的，后执行组件的。</li></ol><h5 id="优缺点" tabindex="-1"><a class="header-anchor" href="#优缺点" aria-hidden="true">#</a> 优缺点</h5><p>优点：</p><pre><code>	1. 提高代码的复用性。
	1. 无需传递状态。
	1. 维护方便，只需修改一个地方即可。
</code></pre><p>缺点：</p><pre><code>1. 命名冲突
1. 滥用的话后期不好维护
1. 不好追溯源，排查问题较麻烦
1. 不能轻易的重复代码
</code></pre><p>​</p><h4 id="hooks函数" tabindex="-1"><a class="header-anchor" href="#hooks函数" aria-hidden="true">#</a> Hooks函数</h4>`,16),m={href:"https://juejin.cn/post/7083401842733875208",target:"_blank",rel:"noopener noreferrer"},g=a(`<ul><li>vue3 的 hook 函数相当于 vue2 中的 mixin ，不同在于 hooks是函数</li><li>vue3 的hook 函数可以帮助我们提高代码的复用性，让我们能在不同的组件中利用hook函数</li></ul><h5 id="hooks" tabindex="-1"><a class="header-anchor" href="#hooks" aria-hidden="true">#</a> Hooks</h5><p>​ 将文件的一些单独功能的js/ts代码进行抽离出来，放入单独的js/ts文件中，或者说是一些可复用的公共方法/功能。</p><p>​ 实现高内聚低耦合。</p><h5 id="自定义hook" tabindex="-1"><a class="header-anchor" href="#自定义hook" aria-hidden="true">#</a> 自定义Hook</h5><ol><li><p>将可复用功能抽离为外部js/ts文件</p></li><li><p>函数名/文件名以 use 开头，形如：useXXX</p></li><li><p>引用时将响应式变量或者方法显示解构暴露出来： <code>const { count, Fn } = useXXX()</code></p></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 加法 Hook</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>ref<span class="token punctuation">,</span> watch<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">const</span> <span class="token function-variable function">useAdd</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">}</span></span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token keyword">const</span> addNum <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">[</span>num1<span class="token punctuation">,</span>num2<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>num1<span class="token punctuation">,</span>num2<span class="token punctuation">]</span></span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
        <span class="token function">addFn</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> <span class="token function-variable function">addFn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span> num2</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
		addNum<span class="token punctuation">.</span>value <span class="token operator">=</span> num1 <span class="token operator">+</span> num2
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
		addNum<span class="token punctuation">,</span>
        addFn
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> useAdd
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
        num1: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>num1<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
        num2: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>num2<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>加法等于： {{addNum}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">import</span> <span class="token punctuation">{</span>ref<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
    <span class="token keyword">import</span> <span class="token punctuation">{</span>useAdd<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./hooks/useAdd.js&#39;</span>  <span class="token comment">//引入hook</span>
    
    <span class="token keyword">const</span> num1 <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> num2 <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token comment">//自定义hook ， 将响应式变量和方法暴露出来</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span>addNum<span class="token punctuation">,</span> addFn<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useAdd</span><span class="token punctuation">(</span><span class="token punctuation">{</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token function">addFn</span><span class="token punctuation">(</span>num1<span class="token punctuation">.</span>value<span class="token punctuation">,</span> num2<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="hooks-与-mixin" tabindex="-1"><a class="header-anchor" href="#hooks-与-mixin" aria-hidden="true">#</a> Hooks 与 Mixin</h5><ol><li><p>mixin 难以追溯方法和属性，vue3 自定义的 hooks 却可以</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Mixin</span>
<span class="token keyword">export</span> <span class="token keyword">default</span><span class="token punctuation">{</span>
	<span class="token literal-property property">mixin</span><span class="token operator">:</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>e<span class="token punctuation">]</span> <span class="token comment">//一个组件内可以混入各种功能的Mixin</span>
	<span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>  <span class="token comment">//问题： 不清楚这个name来自于哪个mixin?</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Hooks  引用时将响应式变量或者方法显式暴露出来</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span>nameRef<span class="token punctuation">,</span> Fn<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useXX</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>无法像 mixin 传递参数来改变逻辑，hooks 却可以</p></li><li><p>mixin 同名变量或方法会被覆盖</p><p>hook 可以在引用的时候对同名变量重命名</p></li></ol><h4 id="响应式原理" tabindex="-1"><a class="header-anchor" href="#响应式原理" aria-hidden="true">#</a> 响应式原理</h4><p>​ vue2.0 实现MVVM（数据双向绑定）的原理是通过 Object.defineProperty 来劫持各个<strong>属性</strong>中的setter 和 getter，在数据变动时发布消息给订阅者，触发相应的监听回调。</p><p>​ vue3.0 实现响应式是通过ES6中的Proxy代理目标<strong>对象</strong>，且一开始只代理最外层对象，嵌套对象惰性监听，性能更好。</p><h5 id="vue2-0响应式" tabindex="-1"><a class="header-anchor" href="#vue2-0响应式" aria-hidden="true">#</a> vue2.0响应式</h5><ol><li><p>基于<code>Object.defineProperty</code>，不具备监听数组的能力，需要重新定义数组的原型才能达到响应式</p></li><li><p><code>Object.defineProperty</code> 无法监听对象属性的添加和删除</p></li><li><p>数据只有存放在data中才有响应式，或者使用<code>vue.$set</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
		<span class="token literal-property property">student</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">sex</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token literal-property property">chatList</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 给student 新增 age 属性，不会触发视图更新</span>
 <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">this</span><span class="token punctuation">.</span>student<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">24</span>
 <span class="token punctuation">}</span>

<span class="token comment">// 原因：Vue.js 不能检测到对象属性的添加或删除。</span>
<span class="token comment">// Vue.js 在初始化实例时 将属性转化为getter/setter，所以属性必须在data对象上才能让Vue.js转化，才能是响应式的</span>

<span class="token comment">// 使用 $set 可以实现响应式</span>
<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>student<span class="token punctuation">,</span> <span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span>

<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>chatList<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;tom&quot;</span><span class="token punctuation">)</span> <span class="token comment">//数组赋值</span>
<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>chatList<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;tom&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">//数组赋值</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>chatList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;tom&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">//数组赋值</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>深度监听需要一次性递归，对性能影响比较大</li></ol></li></ol><h5 id="vue3-0响应式" tabindex="-1"><a class="header-anchor" href="#vue3-0响应式" aria-hidden="true">#</a> vue3.0响应式</h5><pre><code>1. 基于Proxy 和 Reflect，可以监听原生数组，可以监听对象属性的添加和删除
2. 不需要一次性遍历data的属性，可以提高性能
3. Proxy 一开始只代理最外层对象，之后通过判断当前 Reflect.get 的返回值是否为 Object，如果是 则再通过 reactive 方法做代理，实现深度监听。
</code></pre><p><strong><code>Proxy</code></strong>：用于定义基本操作的自定义行为</p><p><code>const proxy = new Proxy(target, handler)</code></p><ul><li><p>has捕获器</p><p><strong><code>has(target, key)</code></strong></p><ul><li>target：目标对象</li><li>propKey：带拦截属性名</li></ul><p>作用：拦截判断 target 对象是否含有属性 propKey 的操作</p><p>对应Reflect：<strong><code>Reflect.has(target, key)</code></strong></p></li><li><p>get捕获器</p><p><strong><code>get(target, key, receiver)</code></strong>：访问 target 的 key 属性，但是 this 指向 receiver，所以实际访问的值是 receiver 的 key 值。</p><p>返回：返回读取的属性</p><p>作用：拦截对象属性的读取</p><p>对应Reflect：<strong><code>Reflect.get(target, key, receiver)</code></strong></p></li><li><p>set捕获器</p><p><strong><code>set(target, key, value, receiver)</code></strong></p><ul><li>target：目标对象</li><li>propKey：待拦截的属性名</li><li>value：新设置的属性值</li><li>receiver： proxy 实例</li></ul><p>返回：严格模式下返回 true 操作成功；否则失败报错</p><p>作用：拦截对象的属性赋值操作</p><p>拦截操作：<code>proxy[key] = value</code></p><p>对应Reflect：<strong><code>Reflect.set(obj, key, value, receiver)</code></strong></p></li><li><p>ownKeys捕获器</p></li><li><p>deleteProperty捕获器</p><p>对应Reflect：<strong><code>Reflect.delete(obj, key)</code></strong></p></li></ul><h5 id="扩展-mvvm" tabindex="-1"><a class="header-anchor" href="#扩展-mvvm" aria-hidden="true">#</a> 扩展：MVVM</h5><h5 id="扩展-响应式" tabindex="-1"><a class="header-anchor" href="#扩展-响应式" aria-hidden="true">#</a> 扩展：响应式</h5><ol><li><p>是什么？</p><p>数据响应式就是 能够使数据变化可以被检测并对这种变化做出相应的机制</p></li><li><p>为什么需要响应式？</p><p>MVVM核心解决的就是连接数据层和视图层，这样能够在数据发生变化时，立刻做出更新处理</p></li><li><p>有什么好处？</p><p>通过数据响应式加上虚拟DOM和patch算法，开发人员只需要操作数据，提高效率。</p></li><li><p>实现、优缺点</p><p>vue2 中的响应式会根据数据类型不同来做不同的处理</p><ul><li>是对象时，采用 Object.defineProperty() 的方式定义数据拦截，通过getter/setter方法来实现数据响应式</li><li>是数组时，通过覆盖数组对象原型的7个变更方法，如push、pop、unshift等</li></ul><p>缺点：</p><ul><li>递归遍历时会造成性能损失</li><li>不能监听数组属性的新增和删除，需要用到$set方法</li></ul></li><li><p>vue3 变化</p><p>vue3 通过 Proxy 代理实现响应式，将代码抽取为独立的reactive包，不需要一次性遍历data的属性，可以提高性能</p><p>可以监听数组属性的增加和删除</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;tom&#39;</span><span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">const</span> handler <span class="token operator">=</span> <span class="token punctuation">{</span>
		<span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span><span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;访问了 \${key} 属性&#39;</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span><span class="token punctuation">{</span>
			console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;\${key} 由 \${target[key]} 设置成 \${value}&#39;</span><span class="token punctuation">)</span>
            Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> handler<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> proxyData <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>proxyData<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
<span class="token comment">// 访问了 name 属性</span>
<span class="token comment">// tom</span>
proxyData<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;qq&#39;</span>
<span class="token comment">// name 由 tom 设置成 qq</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>proxyData<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
<span class="token comment">// qq</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h4 id="v-memo" tabindex="-1"><a class="header-anchor" href="#v-memo" aria-hidden="true">#</a> v-memo</h4><ol><li>和computed相似，只不过computed缓存数据，v-memo缓存DOM。</li><li>接收一个依赖的数组，当依赖的数组变化时，v-memo所对应的DOM包括子集将会重新渲染，反过来说，如果依赖的数组不变，即使整个组件重新渲染了，v-memo所对应的DOM包括子集更新都将被跳过。</li><li>依赖的数组： <code>v-memo=&quot;[value1,value2]&quot;</code> , 或者<code>v-memo=&quot;myValue === true&quot;</code></li><li><code>v-memo=&quot;[]&quot;</code> ===&gt; 相当于 v-once，只会渲染该部分组件一次。</li></ol><h4 id="teleport" tabindex="-1"><a class="header-anchor" href="#teleport" aria-hidden="true">#</a> Teleport</h4><ol><li><p>将你写的组件挂载倒任何你想挂载的地方</p></li><li><p>比如 在vue某个组件的内部处理嵌套组件的定位、z-index、样式等</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>teleport</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#Box<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Box<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Box<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>teleport</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Box<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h4 id="suspense" tabindex="-1"><a class="header-anchor" href="#suspense" aria-hidden="true">#</a> Suspense</h4><p>直接进行引用。自带两个slot，分别为 <code>default</code> 和 <code>fallback</code> 。</p><p>当要加载的组件不满足状态时，Suspense 将回退到 fallback 状态一直到加载的租金啊满足条件时才会进行渲染。</p><p>使用场景：</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>// 异步组件，进行loading处理
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>onClick<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>点击加载异步组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Suspense</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>loadChild<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#default</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Child</span> <span class="token punctuation">/&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#fallback</span><span class="token punctuation">&gt;</span></span>
			loading...
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Suspense</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

// 配合路由器使用
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/home<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Home<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">&gt;</span></span>|
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/about<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>About<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Suspense</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#default</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span> <span class="token punctuation">/&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#fallback</span><span class="token punctuation">&gt;</span></span>
			loading...
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Suspense</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="provide-inject" tabindex="-1"><a class="header-anchor" href="#provide-inject" aria-hidden="true">#</a> Provide / Inject</h4><p>vue全家桶+quasarui+i18n+Mixin</p><p>项目描述：</p><p>UFS是UIT自主研发的云存储系统，采用数据路径与控制路径分离的非对称分布式架构，结合负载均衡与并发访问策略，基于普通硬件构建出大规模存储集群。在统一命名空间下提供上百PB的存储容量及超高聚合带宽，同时具备高可用、灵活扩展、易管理易使用等特点。</p><p>UFS存储管理平台包含9个模块：</p><ol><li>配置向导，主要包括以下内容： <ul><li>配置向导：通过配置向导页面对底层基础设施进行配置，同时引导用户对存储系统进行管理平台的初始化操作。</li></ul></li><li>节点管理，主要包括以下内容： <ul><li>节点管理：监控和管理存储平台中的服务器节点，节点是指用于独立承载分布式存储的节点服务器。</li><li>许可证：用于查看许可信息、上传许可证文件。</li></ul></li><li>集群管理，主要包括以下内容： <ul><li>存储服务：存储服务用于配置、管理当前集群中运行的<code>MSS</code>、<code>CSS</code>等各类服务实例。</li><li>磁盘管理：在管理平台中对磁盘进行添加、移除、格式化等管理操作。</li><li>客户端：客户端管理页面主要提供对访问UFS文件系统的客户端会话进行查询、统计操作。</li></ul></li><li>文件系统，主要包括以下内容： <ul><li>文件管理：文件管理提供对分布式文件系统中目录、文件的配置功能。</li><li>回收站：提供对回收站文件的管理操作。</li><li>配额管理：配额管理即对目录的存储资源占用情况进行监控和限制。对指定目录设置配额，限制所有用户在该目录下使用的存储资源。</li><li>快照管理：文件存储快照特性为用户提供了基于目录的快照，支持生成指定目录在特定时间点的一致性映像，同时可以在不中断业务的情况下，得到与原文件一致的数据副本。</li><li>存储策略：存储系统采用数据副本备份机制来保证数据的可靠性，即同一份数据可以复制保存为 1~5 个副本。</li></ul></li><li>访问协议，主要包括以下内容： <ul><li>UFS、NFS、CIFS：</li></ul></li><li>认证管理，主要包括以下内容： <ul><li>本地用户：</li><li>本地组：</li><li>目录服务：通过过AD域服务器对访问共享目录的用户进行身份验证。若访问共享目录的用户为合法的AD域用户，则允许其访问共享。</li><li>LDAP：通过LDAP域配置，可将存储集群的NAS服务器加入到NFS客户端所在的LDAP域中，这样NAS服务器和NFS客户端就可以共享该LDAP域中的用户信息，存储集群可直接通过LDAP域用户信息对访问NFS共享目录的用户进行身份验证。</li></ul></li><li>运维管理，主要包括以下内容： <ul><li>用户管理、角色管理、权限配置、任务管理、审计日志、操作日志、系统日志：</li></ul></li><li>监控报表、监控告警、系统设置</li></ol><p>使用技术：</p><ol><li>vue2.0全家桶和Typescript结合quasarUI编写页面</li><li>使用Vue-Router进行路由配置、跳转、拦截等</li><li>使用async/await来实现异步调用api的方法</li><li>i18n国际化插件实现中英文分离</li><li>websocket 全局封装，如：实时监控数据并返回</li><li>Mixin混入到组件内部：如刷新页面后表格的排序功能</li><li>采用组件化、模块化方式编写代码。如：图表分离，本地localStorage存储，弹出框、表单等</li><li></li></ol>`,40);function b(h,f){const t=i("ExternalLinkIcon");return o(),c("div",null,[r,l(" more "),k,n("p",null,[n("a",d,[s("参考链接"),p(t)])]),v,n("p",null,[n("a",m,[s("Hook链接"),p(t)])]),g])}const w=e(u,[["render",b],["__file","vue3.html.vue"]]);export{w as default};
