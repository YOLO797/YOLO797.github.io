import{_ as e,W as d,X as a,Y as o,$ as r,a1 as t}from"./framework-b609eea8.js";const c={},h=r("p",null,"vue2.0生命周期：beforeCreate、created、beforeMount、mounted、beforeUpdate、updated、beforeDestroy、destroyed",-1),n=t('<h3 id="_1-什么是生命周期" tabindex="-1"><a class="header-anchor" href="#_1-什么是生命周期" aria-hidden="true">#</a> 1. 什么是生命周期</h3><p>对于 <code>vue</code> 来讲，生命周期就是一个 <code>vue</code> 实例从创建到销毁的过程</p><h3 id="_2-生命周期阶段" tabindex="-1"><a class="header-anchor" href="#_2-生命周期阶段" aria-hidden="true">#</a> 2. 生命周期阶段</h3><h4 id="_2-1-beforecreate" tabindex="-1"><a class="header-anchor" href="#_2-1-beforecreate" aria-hidden="true">#</a> 2.1 beforeCreate</h4><p>创建前，当前阶段 <code>datat</code>、<code>methods</code>、<code>computed</code>以及 <code>watch</code> 上的数据都不能访问</p><h4 id="_2-2-created" tabindex="-1"><a class="header-anchor" href="#_2-2-created" aria-hidden="true">#</a> 2.2 created</h4><p>创建后，可以做一些初始数据的获取，在当前阶段无法与 <code>DOM</code> 进行交互</p><h4 id="_2-3-beforemount" tabindex="-1"><a class="header-anchor" href="#_2-3-beforemount" aria-hidden="true">#</a> 2.3 beforeMount</h4><p>挂载前，当前阶段虚拟 <code>DOM</code> 已经完成，即将开始渲染</p><h4 id="_2-4-mounted" tabindex="-1"><a class="header-anchor" href="#_2-4-mounted" aria-hidden="true">#</a> 2.4 mounted</h4><p>挂载后，数据完成双向绑定，可以访问到 <code>DOM</code> 节点</p><h4 id="_2-5-beforeupdate" tabindex="-1"><a class="header-anchor" href="#_2-5-beforeupdate" aria-hidden="true">#</a> 2.5 beforeUpdate</h4><p>更新前，在当前阶段更新数据，不会造成重渲染</p><h4 id="_2-6-updated" tabindex="-1"><a class="header-anchor" href="#_2-6-updated" aria-hidden="true">#</a> 2.6 updated</h4><p>更新后</p><h4 id="_2-7-beforedestroy" tabindex="-1"><a class="header-anchor" href="#_2-7-beforedestroy" aria-hidden="true">#</a> 2.7 beforeDestroy</h4><p>销毁前，比如清除定时器</p><h4 id="_2-8-destroyed" tabindex="-1"><a class="header-anchor" href="#_2-8-destroyed" aria-hidden="true">#</a> 2.8 destroyed</h4><p>销毁后，这个时候只剩下 <code>DOM</code> 空壳。组件已经被拆解，数据绑定移除，监听被移除</p><h3 id="_3-父子组件生命周期调用" tabindex="-1"><a class="header-anchor" href="#_3-父子组件生命周期调用" aria-hidden="true">#</a> 3. 父子组件生命周期调用</h3><p>组件的调用顺序是先父后子，渲染顺序是先子后父。</p><p>组件的销毁顺序是先父后子，销毁完成顺序是先子后父。</p><ul><li>加载渲染过程：父 <code>beforeCreste</code> -&gt; 父 <code>create</code> -&gt; 父 <code>beforeMount</code> -&gt; 子 <code>beforeCreate</code> -&gt; 子 <code>created</code> -&gt; 子 <code>beforeMount</code> -&gt; 子 <code>mounted</code> -&gt; 父 <code>mounted</code></li><li>子组件更新过程：父 <code>beforeUpdate</code> -&gt; 子 <code>beforeUpdate</code> -&gt; 子 <code>updated</code> -&gt; 父 <code>updated</code></li><li>父组件更新过程：父 <code>beforeUpdate</code> -&gt; 父 <code>updated</code></li><li>销毁过程：父 <code>beforeDestroy</code> -&gt; 子 <code>beforeDestroy</code> -&gt; 子 <code>destroyed</code> -&gt; 父 <code>destroyed</code></li></ul><h3 id="_4-数据请求在created和mounted的区别" tabindex="-1"><a class="header-anchor" href="#_4-数据请求在created和mounted的区别" aria-hidden="true">#</a> 4. 数据请求在created和mounted的区别</h3>',24);function i(s,u){return d(),a("div",null,[h,o(" more "),n])}const _=e(c,[["render",i],["__file","生命周期.html.vue"]]);export{_ as default};
