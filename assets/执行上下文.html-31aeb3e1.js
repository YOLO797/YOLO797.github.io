import{_ as n,W as a,X as s,Y as e,a1 as t}from"./framework-b609eea8.js";const i={},c=t(`<h2 id="_1-前言" tabindex="-1"><a class="header-anchor" href="#_1-前言" aria-hidden="true">#</a> 1. 前言</h2><h3 id="_1-1-变量对象" tabindex="-1"><a class="header-anchor" href="#_1-1-变量对象" aria-hidden="true">#</a> 1.1 变量对象</h3><h3 id="_1-2-作用域链" tabindex="-1"><a class="header-anchor" href="#_1-2-作用域链" aria-hidden="true">#</a> 1.2 作用域链</h3><h3 id="_1-3-this-指针" tabindex="-1"><a class="header-anchor" href="#_1-3-this-指针" aria-hidden="true">#</a> 1.3 this 指针</h3><h2 id="_2-执行上下文" tabindex="-1"><a class="header-anchor" href="#_2-执行上下文" aria-hidden="true">#</a> 2. 执行上下文</h2><h3 id="_2-1-全局执行上下文" tabindex="-1"><a class="header-anchor" href="#_2-1-全局执行上下文" aria-hidden="true">#</a> 2.1 全局执行上下文</h3><p>只有一个，浏览器中的全局对象就是 <code>window</code> 对象， <code>this</code> 指向这个全局对象</p><h3 id="_2-2-函数执行上下文" tabindex="-1"><a class="header-anchor" href="#_2-2-函数执行上下文" aria-hidden="true">#</a> 2.2 函数执行上下文</h3><p>存在无数个，只有在函数被调用时才会被创建，每次调用函数都会创建一个新的函数执行上下文</p><h3 id="_2-3-eval-函数执行上下文" tabindex="-1"><a class="header-anchor" href="#_2-3-eval-函数执行上下文" aria-hidden="true">#</a> 2.3 Eval 函数执行上下文</h3><p>值执行在 <code>eval</code> 函数中的代码，很少用，不建议使用</p><h2 id="_3-执行栈" tabindex="-1"><a class="header-anchor" href="#_3-执行栈" aria-hidden="true">#</a> 3. 执行栈</h2><h3 id="_3-1-定义" tabindex="-1"><a class="header-anchor" href="#_3-1-定义" aria-hidden="true">#</a> 3.1 定义</h3><p>执行栈：调用栈，先进后出，用于存储在代码执行期间创建的所有的执行上下文</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">&#39;Hello World!&#39;</span>
<span class="token keyword">function</span> <span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Inside first function&#39;</span><span class="token punctuation">)</span>
  <span class="token function">second</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Again inside first function&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">second</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Inside second function&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Inside Global Execution Context&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>流程：</p><ul><li>创建全局上下文压入执行栈</li><li><code>first</code> 函数被调用，创建函数执行上下文并压入栈</li><li>执行 <code>first</code> 函数过程遇到 <code>second</code> 函数，再创建一个 <code>seconed</code> 函数执行上下文并压入栈</li><li><code>second</code> 函数执行完毕，对应的函数执行上文也被推出栈中，执行下一个执行上下文 <code>first</code> 函数</li><li><code>first</code>函数执行完毕，对应的函数执行上下文出栈，然后执行全局上下文</li><li>所有代码执行完毕，全局上下文出栈，程序结束</li></ul>`,17);function o(p,d){return a(),s("div",null,[e(" more "),c])}const r=n(i,[["render",o],["__file","执行上下文.html.vue"]]);export{r as default};
