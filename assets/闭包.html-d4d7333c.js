import{_ as n,W as a,X as s,Y as e,$ as t,a2 as p}from"./framework-fe863d21.js";const c={},i=t("p",null,"函数 + 函数能够访问的自由变量",-1),o=p(`<h3 id="_1-定义" tabindex="-1"><a class="header-anchor" href="#_1-定义" aria-hidden="true">#</a> 1. 定义</h3><h4 id="_1-1-闭包函数" tabindex="-1"><a class="header-anchor" href="#_1-1-闭包函数" aria-hidden="true">#</a> 1.1 闭包函数</h4><p>声名在一个函数中的函数</p><h4 id="_1-2-闭包" tabindex="-1"><a class="header-anchor" href="#_1-2-闭包" aria-hidden="true">#</a> 1.2 闭包</h4><p>内部函数总是可以访问其所在的外部函数中声名的参数和变量</p><h3 id="_2-特点" tabindex="-1"><a class="header-anchor" href="#_2-特点" aria-hidden="true">#</a> 2. 特点</h3><ul><li><p>让外部可以访问函数内部变量</p></li><li><p>局部变量会一直在内存中</p></li><li><p>可以避免使用全局变量，防止全局变量污染</p></li><li><p>会造成内存泄漏（有一块内存空间被长期占用，而不被释放）</p><p>内存泄漏为：key = value，key 被删除后，value 常驻在内存中</p></li></ul><h3 id="_3-应用场景" tabindex="-1"><a class="header-anchor" href="#_3-应用场景" aria-hidden="true">#</a> 3. 应用场景</h3><ul><li>返回一个函数</li><li>作为函数参数传递</li><li>回调函数</li><li>立即执行函数</li></ul><h4 id="_3-1-读取内部函数的变化" tabindex="-1"><a class="header-anchor" href="#_3-1-读取内部函数的变化" aria-hidden="true">#</a> 3.1 读取内部函数的变化</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span>
  <span class="token keyword">function</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> f2
<span class="token punctuation">}</span>
<span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">result</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// 10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-2-函数柯里化" tabindex="-1"><a class="header-anchor" href="#_3-2-函数柯里化" aria-hidden="true">#</a> 3.2 函数柯里化</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">y</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token keyword">return</span> x<span class="token operator">+</span>y
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">//3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-3-立即执行函数" tabindex="-1"><a class="header-anchor" href="#_3-3-立即执行函数" aria-hidden="true">#</a> 3.3 立即执行函数</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span>
<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment">// 2</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15);function l(u,r){return a(),s("div",null,[i,e(" more "),o])}const k=n(c,[["render",l],["__file","闭包.html.vue"]]);export{k as default};
