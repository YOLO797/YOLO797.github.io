import{_ as a,W as s,X as e,Y as o,$ as n,a1 as t}from"./framework-b609eea8.js";const c={},p=n("p",null,"模块加载主要有4种规范，本篇主要重点介绍CommonJS和ES6 module：",-1),i=n("ol",null,[n("li",null,"AMD"),n("li",null,"CMD"),n("li",null,"CommonJS"),n("li",null,"ES6 module")],-1),l=t(`<h3 id="_1-commonjs" tabindex="-1"><a class="header-anchor" href="#_1-commonjs" aria-hidden="true">#</a> 1. CommonJS</h3><h4 id="_1-1-定义" tabindex="-1"><a class="header-anchor" href="#_1-1-定义" aria-hidden="true">#</a> 1.1 定义</h4><ul><li><p>导出：<code>exports</code>、<code>module.exports</code></p><p>引入：<code>require</code></p></li><li><p>是一种<strong>同步加载模块</strong>的方式，即<strong>只有当模块加载完成后，才能执行后面的操作</strong>。</p></li><li><p><code>CommonJS</code> 规定，每一个 <code>JS</code> 文件就是一个模块，有自己的作用域；在一个模块中定义的变量、函数等都是私有变量，对其他文件不可见</p></li></ul><h4 id="_1-2-使用" tabindex="-1"><a class="header-anchor" href="#_1-2-使用" aria-hidden="true">#</a> 1.2 使用</h4><p>导出模块的方式：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>y</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">return</span> x<span class="token operator">+</span>y
<span class="token punctuation">}</span>
module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>add <span class="token operator">=</span> add
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>引入模块的方式：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> add <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./add.js&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>add<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-es6-module" tabindex="-1"><a class="header-anchor" href="#_2-es6-module" aria-hidden="true">#</a> 2. ES6 module</h3><h4 id="_2-1-定义" tabindex="-1"><a class="header-anchor" href="#_2-1-定义" aria-hidden="true">#</a> 2.1 定义</h4><ul><li><p>导出：<code>export</code></p><p>引入：<code>import</code></p></li><li><p><strong>异步加载，不会造成阻塞，即等整个页面渲染完成后，在执行模块脚本</strong></p></li></ul><h4 id="_2-2-使用" tabindex="-1"><a class="header-anchor" href="#_2-2-使用" aria-hidden="true">#</a> 2.2 使用</h4><p>导出模块的方式：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// profile.js</span>
<span class="token keyword">var</span> firstName <span class="token operator">=</span> <span class="token string">&#39;aa&#39;</span>
<span class="token keyword">var</span> lastName <span class="token operator">=</span> <span class="token string">&#39;bb&#39;</span>
<span class="token keyword">var</span> year <span class="token operator">=</span> <span class="token number">2023</span>

<span class="token keyword">export</span> <span class="token punctuation">{</span>firstName<span class="token punctuation">,</span> lastName<span class="token punctuation">,</span> year<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>引入模块的方式：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>firstName<span class="token punctuation">,</span> lastName<span class="token punctuation">,</span> year<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./profile&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-commonjs和es6-moudle的区别" tabindex="-1"><a class="header-anchor" href="#_3-commonjs和es6-moudle的区别" aria-hidden="true">#</a> 3. CommonJS和ES6 Moudle的区别</h3><div class="hint-container info"><p class="hint-container-title">区别</p><ul><li><p><code>CommonJS</code> 是同步加载模块，<code>ES6</code> 是异步加载模块</p></li><li><p><code>CommonJS</code> 模块输出的是一个值的拷贝，<code>ES6</code> 模块输出的是值的引用</p><ul><li><p><code>CommonJS</code> <strong>一旦输出一个值，模块内部的变化就影响不到这个值</strong></p></li><li><p><code>ES6</code> 在 <code>JS</code>引擎对脚本静态分析的时候，遇到 <code>import</code> ，会生成一个 <strong>只读引用</strong>。等到脚本真正执行的时候，再根据这个只读引用，到被加载的哪个模块里面去取值。</p><p>即，<strong><code>ES6</code> 模块是动态引用，不会缓存运行结果，而是动态的去被加载的地方取值，并且变量总是绑定其所在的模块</strong>。</p></li></ul></li><li><p><code>CommonJS</code> 模块是运行时加载，<code>ES6</code> 模块编译时输出接口</p><ul><li><code>CommonJS</code>加载的是一个对象，该对象只有在脚本运行完成才会生成</li><li><code>ES6</code> 它的对外接口只是一种静态定义，在代码静态解析阶段就会生成</li></ul></li></ul></div>`,18);function d(r,u){return s(),e("div",null,[p,i,o(" more "),l])}const k=a(c,[["render",d],["__file","模块加载.html.vue"]]);export{k as default};
