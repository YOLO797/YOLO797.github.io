import{_ as n,W as s,X as a,Y as e,a1 as p}from"./framework-b609eea8.js";const t={},o=p(`<h3 id="_1-基本类型" tabindex="-1"><a class="header-anchor" href="#_1-基本类型" aria-hidden="true">#</a> 1. 基本类型</h3><h4 id="_1-1-布尔值" tabindex="-1"><a class="header-anchor" href="#_1-1-布尔值" aria-hidden="true">#</a> 1.1 布尔值</h4><h4 id="_1-2-数字" tabindex="-1"><a class="header-anchor" href="#_1-2-数字" aria-hidden="true">#</a> 1.2 数字</h4><h4 id="_1-3-字符串" tabindex="-1"><a class="header-anchor" href="#_1-3-字符串" aria-hidden="true">#</a> 1.3 字符串</h4><h4 id="_1-4-数组" tabindex="-1"><a class="header-anchor" href="#_1-4-数组" aria-hidden="true">#</a> 1.4 数组</h4><ul><li>number[]</li><li>Array</li></ul><h4 id="_1-5-元组tuple" tabindex="-1"><a class="header-anchor" href="#_1-5-元组tuple" aria-hidden="true">#</a> 1.5.元组Tuple</h4><p>​ 允许一个已知元素数量和类型的数组，个元素的类型不必相同</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> x <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span><span class="token builtin">number</span><span class="token punctuation">]</span>
x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;hi&#39;</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-6-枚举" tabindex="-1"><a class="header-anchor" href="#_1-6-枚举" aria-hidden="true">#</a> 1.6 枚举</h4><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">enum</span> Color <span class="token punctuation">{</span>Red<span class="token punctuation">,</span> Green<span class="token punctuation">,</span> Blue<span class="token punctuation">}</span>
<span class="token keyword">let</span> c<span class="token operator">:</span> Color <span class="token operator">=</span> Color<span class="token punctuation">.</span>Green
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-7-any" tabindex="-1"><a class="header-anchor" href="#_1-7-any" aria-hidden="true">#</a> 1.7 Any</h4><ul><li>不清楚类型变量时：<code>let notSure: any = 4</code></li><li>只知道一部分数据类型时：<code>let list:any[] = [1, true, &quot;hi&quot;]</code></li></ul><h4 id="_1-8-void" tabindex="-1"><a class="header-anchor" href="#_1-8-void" aria-hidden="true">#</a> 1.8 Void</h4><p>​ 没有任何类型，函数没有返回值</p><h4 id="_1-9-undefined和null" tabindex="-1"><a class="header-anchor" href="#_1-9-undefined和null" aria-hidden="true">#</a> 1.9 Undefined和Null</h4><h4 id="_1-10-never" tabindex="-1"><a class="header-anchor" href="#_1-10-never" aria-hidden="true">#</a> 1.10 Never</h4><ul><li><p>抛出异常</p></li><li><p>不会有返回值的函数表达式</p></li><li><p>箭头函数表达式的返回值类型</p></li></ul><h4 id="_1-11-object" tabindex="-1"><a class="header-anchor" href="#_1-11-object" aria-hidden="true">#</a> 1.11 Object</h4><h3 id="_2-类型断言" tabindex="-1"><a class="header-anchor" href="#_2-类型断言" aria-hidden="true">#</a> 2. 类型断言</h3><ul><li><p>“尖括号”语法：&lt;类型&gt;变量名</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> value<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token string">&quot;this is string&quot;</span>
<span class="token keyword">let</span> length<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span>length
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>as语法： 变量名 as 类型</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> value<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token string">&quot;this is string&quot;</span>
<span class="token keyword">let</span> length<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token punctuation">(</span>value <span class="token keyword">as</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_3-类型索引" tabindex="-1"><a class="header-anchor" href="#_3-类型索引" aria-hidden="true">#</a> 3. 类型索引</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">//使用extends关键字实现泛型约束</span>
<span class="token keyword">interface</span> <span class="token class-name">Sizeable</span><span class="token punctuation">{</span>
    size<span class="token operator">:</span> <span class="token builtin">number</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">trace</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> Sizeable<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> arg
<span class="token punctuation">}</span>

<span class="token comment">//索引类型 使用 keyof T 把传入的对象属性类型取出生成一个联合类型</span>
<span class="token comment">//keyof T   索引类型查询的结果为 T上已知的公共属性名的来联合</span>
<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">getValue</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> object<span class="token punctuation">,</span> <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>obj<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> key<span class="token operator">:</span> <span class="token constant">U</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-type类型别名" tabindex="-1"><a class="header-anchor" href="#_4-type类型别名" aria-hidden="true">#</a> 4. type类型别名</h3><ol><li>可以创建联合类型、元组类型、基本类型（string , number , symbol）</li><li>可以利用type和映射类型快速创建类型</li><li>可以封装一个快速生成接口类型的函数类型</li></ol><h3 id="_5-keyof-关键字" tabindex="-1"><a class="header-anchor" href="#_5-keyof-关键字" aria-hidden="true">#</a> 5. keyof 关键字</h3><p>检查键是否存在 获取某种类型的所有键 返回联合类型</p><p>接收一个对象类型作为参数，并返回该对象的所有key值组成的联合类型</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">IProps</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
    age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
    sex<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>
<span class="token comment">// Keys 类型为&#39;name&#39;|&#39;age&#39;|&#39;sex&#39; 组成的联合类型</span>
<span class="token keyword">type</span> <span class="token class-name">Keys</span> <span class="token operator">=</span> <span class="token keyword">keyof</span> IProps
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">//函数接受两个泛型参数</span>
<span class="token comment">//T 代表object的类型，同时T需要满足约束一个对象</span>
<span class="token comment">//K 代表第二个参数K的类型，同时K需要满足约束keyof T</span>
<span class="token comment">//ketof T 代表object中所有key组成的联合类型</span>
<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">getValueFromKey</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> object<span class="token punctuation">,</span><span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>obj<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> key<span class="token operator">:</span> <span class="token constant">K</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-typeof操作符" tabindex="-1"><a class="header-anchor" href="#_6-typeof操作符" aria-hidden="true">#</a> 6. typeof操作符</h3><p>用于获取变量的类型，typeof 变量</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span>
    age<span class="token operator">:</span> <span class="token number">18</span>
<span class="token punctuation">}</span>
<span class="token keyword">type</span> <span class="token class-name">Person</span> <span class="token operator">=</span> <span class="token keyword">typeof</span> p<span class="token punctuation">;</span>
<span class="token comment">//等同于</span>
<span class="token keyword">type</span> <span class="token class-name">Person</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-infer-占位" tabindex="-1"><a class="header-anchor" href="#_7-infer-占位" aria-hidden="true">#</a> 7. infer 占位</h3><h4 id="_1-infer-解包" tabindex="-1"><a class="header-anchor" href="#_1-infer-解包" aria-hidden="true">#</a> 1.<code>infer</code> 解包</h4><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Ids</span> <span class="token operator">=</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">type</span> <span class="token class-name">Names</span> <span class="token operator">=</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span>

<span class="token comment">// 不使用 infer</span>
<span class="token keyword">type</span> <span class="token class-name">Unpacked<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">Names</span> <span class="token operator">?</span> <span class="token builtin">string</span> <span class="token operator">:</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">Ids</span> <span class="token operator">?</span> <span class="token builtin">number</span> <span class="token operator">:</span> <span class="token constant">T</span>

<span class="token comment">//// 使用 infer</span>
<span class="token keyword">type</span> <span class="token class-name">Unpacked<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token constant">R</span> <span class="token operator">:</span> <span class="token constant">T</span>

<span class="token keyword">type</span> <span class="token class-name">idType</span> <span class="token operator">=</span> Unpacked<span class="token operator">&lt;</span>Ids<span class="token operator">&gt;</span>      <span class="token comment">// 类型为 number</span>
<span class="token keyword">type</span> <span class="token class-name">nameType</span> <span class="token operator">=</span> Unpacked<span class="token operator">&lt;</span>Names<span class="token operator">&gt;</span>  <span class="token comment">// 类型为 string</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>T extends (infer R)[] ? R : T</code> ：如果 T 是一个待推断类型的数组，则返回推断的类型，否则返回 T</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 想要获取一个 promise&lt;xxx&gt; 类型中的 xxx 类型</span>
<span class="token keyword">type</span> <span class="token class-name">Response</span> <span class="token operator">=</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>
<span class="token keyword">type</span> <span class="token class-name">Unpacked<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token operator">&gt;</span></span> <span class="token operator">?</span> <span class="token constant">R</span> <span class="token operator">:</span> <span class="token constant">T</span>

<span class="token keyword">type</span> <span class="token class-name">resType</span> <span class="token operator">=</span> Unpacked<span class="token operator">&lt;</span>Response<span class="token operator">&gt;</span>   <span class="token comment">// resType 的类型为 number[]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-infer-推断联合类型" tabindex="-1"><a class="header-anchor" href="#_2-infer-推断联合类型" aria-hidden="true">#</a> 2.<code>infer</code> 推断联合类型</h4><p>同一个类型变量在推断的值有多种情况的时候会推断为联合类型</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Foo<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">{</span>a<span class="token operator">:</span> <span class="token keyword">infer</span> <span class="token constant">U</span><span class="token punctuation">;</span> b<span class="token operator">:</span> <span class="token keyword">infer</span> <span class="token constant">U</span><span class="token punctuation">}</span> <span class="token operator">?</span> <span class="token constant">U</span> <span class="token operator">:</span> <span class="token builtin">never</span>

<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T1</span></span> <span class="token operator">=</span> Foo<span class="token operator">&lt;</span><span class="token punctuation">{</span>a<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>   <span class="token comment">// T1 类型为 string</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T2</span></span> <span class="token operator">=</span> Foo<span class="token operator">&lt;</span><span class="token punctuation">{</span>a<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>   <span class="token comment">// T1 类型为 string | number</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 通过元组的形式</span>
<span class="token keyword">type</span> <span class="token class-name">Foo<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token constant">R</span> <span class="token operator">:</span> <span class="token builtin">never</span>

<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T1</span></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">]</span>
<span class="token keyword">type</span> <span class="token class-name">Union</span> <span class="token operator">=</span> Foo<span class="token operator">&lt;</span><span class="token constant">T1</span><span class="token operator">&gt;</span>  <span class="token comment">//Union 类型为 string | number</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-infer-推断交叉类型" tabindex="-1"><a class="header-anchor" href="#_3-infer-推断交叉类型" aria-hidden="true">#</a> 3.<code>infer</code> 推断交叉类型</h4><p><strong>在逆变位置上，同一类型变量的多个候选类型将会被推断为交叉类型。</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Bar<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">{</span> <span class="token function-variable function">a</span><span class="token operator">:</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token keyword">infer</span> <span class="token constant">U</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span> <span class="token function-variable function">b</span><span class="token operator">:</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token keyword">infer</span> <span class="token constant">U</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span> <span class="token punctuation">}</span> <span class="token operator">?</span> <span class="token constant">U</span> <span class="token operator">:</span> <span class="token builtin">never</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T1</span></span> <span class="token operator">=</span> Bar<span class="token operator">&lt;</span><span class="token punctuation">{</span> <span class="token function-variable function">a</span><span class="token operator">:</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span> <span class="token function-variable function">b</span><span class="token operator">:</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>  
<span class="token comment">// string &amp; number </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-嵌套-复杂" tabindex="-1"><a class="header-anchor" href="#_4-嵌套-复杂" aria-hidden="true">#</a> 4.嵌套 复杂</h4><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Ref<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> <span class="token builtin">any</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
	value<span class="token operator">:</span> <span class="token constant">T</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">UnwarpRef<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    ref<span class="token operator">:</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">Ref<span class="token operator">&lt;</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token operator">&gt;</span></span> <span class="token operator">?</span> <span class="token constant">R</span> <span class="token operator">:</span> <span class="token constant">T</span>
    object<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> UnwarpRef<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token punctuation">}</span>
    other<span class="token operator">:</span> <span class="token constant">T</span>
<span class="token punctuation">}</span><span class="token punctuation">[</span>
	<span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">Ref</span>
	<span class="token operator">?</span> <span class="token string">&#39;ref&#39;</span>
	<span class="token operator">:</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">object</span>
		<span class="token operator">?</span> <span class="token string">&#39;object&#39;</span>
		<span class="token operator">:</span> <span class="token string">&#39;other&#39;</span>
<span class="token punctuation">]</span>

<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">ref</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">Ref</span> <span class="token operator">?</span> <span class="token constant">T</span> <span class="token operator">:</span> Ref<span class="token operator">&lt;</span>UnwarpRef<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;&gt;</span>

<span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    foo<span class="token operator">:</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    bar<span class="token operator">:</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

count<span class="token punctuation">.</span>value<span class="token punctuation">.</span>foo <span class="token comment">// string</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-接口" tabindex="-1"><a class="header-anchor" href="#_8-接口" aria-hidden="true">#</a> 8. 接口</h3><h4 id="_1-属性" tabindex="-1"><a class="header-anchor" href="#_1-属性" aria-hidden="true">#</a> 1.属性</h4><pre><code>1.1可选属性
</code></pre><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">SquareConfig</span> <span class="token punctuation">{</span>
	color<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    width<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">createSquare</span><span class="token punctuation">(</span>config<span class="token operator">:</span> SquareConfig<span class="token punctuation">)</span><span class="token operator">:</span><span class="token punctuation">{</span>color<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">;</span>area<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">}</span><span class="token punctuation">{</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> mySquare <span class="token operator">=</span> <span class="token function">createSquare</span><span class="token punctuation">(</span><span class="token punctuation">{</span>color<span class="token operator">:</span><span class="token string">&quot;black&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 1.2 只读属性</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>
    <span class="token keyword">readonly</span> x<span class="token operator">:</span><span class="token builtin">number</span>
<span class="token punctuation">}</span>

<span class="token comment">// readonly: 作为属性使用</span>
<span class="token comment">// const: 作为变量使用</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-函数类型" tabindex="-1"><a class="header-anchor" href="#_2-函数类型" aria-hidden="true">#</a> 2.函数类型</h4><p>​ 字符串和数字</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">SearchFunc</span> <span class="token punctuation">{</span>
    <span class="token punctuation">(</span>source <span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> subs <span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token builtin">boolean</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> mySearch <span class="token operator">:</span> SearchFunc<span class="token punctuation">;</span>
<span class="token function-variable function">mySearch</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>sourch<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> subs<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> source<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>subs<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span>
<span class="token punctuation">}</span>

<span class="token comment">//未指定类型，</span>
<span class="token comment">//因为函数直接赋值给了SearchFunc类型变量，所以会推断出参数类型</span>
<span class="token comment">//函数返回值类型通过其返回值推断出来</span>
<span class="token function-variable function">mySearch</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>sourch<span class="token punctuation">,</span> subs<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> source<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>subs<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-可索引的类型" tabindex="-1"><a class="header-anchor" href="#_3-可索引的类型" aria-hidden="true">#</a> 3.可索引的类型</h4><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">StringArray</span><span class="token punctuation">{</span>
	<span class="token punctuation">[</span>index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-类类型" tabindex="-1"><a class="header-anchor" href="#_4-类类型" aria-hidden="true">#</a> 4.类类型</h4><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">xxx</span><span class="token punctuation">{</span>
    current <span class="token operator">:</span> Date
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Clock</span> <span class="token keyword">implements</span> <span class="token class-name">xxx</span><span class="token punctuation">{</span>
	<span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-继承接口" tabindex="-1"><a class="header-anchor" href="#_5-继承接口" aria-hidden="true">#</a> 5.继承接口</h4><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Shape</span><span class="token punctuation">{</span>
    color<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">interface</span> <span class="token class-name">PenStroke</span><span class="token punctuation">{</span>
    width<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">interface</span> <span class="token class-name">Square</span> <span class="token keyword">extends</span> <span class="token class-name">Shape</span><span class="token punctuation">{</span>
    length<span class="token operator">:</span> <span class="token builtin">number</span>
<span class="token punctuation">}</span>

<span class="token comment">//多继承</span>
<span class="token keyword">interface</span> <span class="token class-name">Square</span> <span class="token keyword">extends</span> <span class="token class-name">Shape</span><span class="token punctuation">,</span>PenStroke<span class="token punctuation">{</span>
    length<span class="token operator">:</span> <span class="token builtin">number</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> square <span class="token operator">=</span> <span class="token operator">&lt;</span>Square<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
square<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">&quot;red&quot;</span>
square<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9-泛型" tabindex="-1"><a class="header-anchor" href="#_9-泛型" aria-hidden="true">#</a> 9. 泛型</h3><pre><code>1. 定义：对类型编程，定义函数、接口或者类时，不预先定义好具体的类型，而在使用的时候在指定类型的一种特性
2. 使用方式：就是在标志符后面添加尖括号（&lt;&gt;），然后在&lt;&gt;里写形参，并在 body（函数体， 接口体或类体） 里用这些形参做一些逻辑处理。
3. 接收什么类型的参数 ，返回什么类型的参数
</code></pre><h4 id="_1-泛型约束" tabindex="-1"><a class="header-anchor" href="#_1-泛型约束" aria-hidden="true">#</a> 1.泛型约束</h4><p>**写法：&lt; 泛型变量 extends 接口 &gt; **</p><p>约束泛型所需要满足的格式</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">IHasLength</span><span class="token punctuation">{</span>
    length<span class="token operator">:</span> <span class="token builtin">number</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">getLength</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> IHasLength<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> arg<span class="token punctuation">.</span>length
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-函数泛型" tabindex="-1"><a class="header-anchor" href="#_2-函数泛型" aria-hidden="true">#</a> 2.函数泛型</h4><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">returnItem</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>para<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> para
<span class="token punctuation">}</span>
<span class="token comment">//一次定义多个参数</span>
<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">retunItem</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>para<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token punctuation">]</span><span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token punctuation">[</span>para<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>para<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
<span class="token function">retunItem</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;seven&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-接口泛型" tabindex="-1"><a class="header-anchor" href="#_3-接口泛型" aria-hidden="true">#</a> 3.接口泛型</h4><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">ReturnItem<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token punctuation">(</span>para<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token constant">T</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> returnItem<span class="token operator">:</span> ReturnItem<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span> <span class="token operator">=</span> para<span class="token operator">=&gt;</span> para
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-类泛型" tabindex="-1"><a class="header-anchor" href="#_4-类泛型" aria-hidden="true">#</a> 4.类泛型</h4><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Stack<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> arr<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    
    <span class="token keyword">public</span> <span class="token function">push</span><span class="token punctuation">(</span>item<span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React</span><span class="token punctuation">.</span>Component<span class="token operator">&lt;</span>Props<span class="token punctuation">,</span> State<span class="token operator">&gt;</span><span class="token punctuation">{</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-内置泛型" tabindex="-1"><a class="header-anchor" href="#_5-内置泛型" aria-hidden="true">#</a> 5.内置泛型</h4><h6 id="partial-t" tabindex="-1"><a class="header-anchor" href="#partial-t" aria-hidden="true">#</a> <code>Partial&lt;T&gt;</code></h6><p>创造一个新的类型，并将实际类型参数T中所有属性变为 可选属性。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A1</span></span> <span class="token operator">=</span> Partial<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token operator">&gt;</span>
<span class="token comment">//相当于下面格式，此时A1的类型为</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A1</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    name<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
    a<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="required-t" tabindex="-1"><a class="header-anchor" href="#required-t" aria-hidden="true">#</a> <code>Required&lt;T&gt;</code></h6><p>创造一个新的类型，并将实际类型参数T中所有属性变为必选属性。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token punctuation">{</span>
    name<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A1</span></span> <span class="token operator">=</span> Required<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token operator">&gt;</span>
<span class="token comment">//相当于下面格式，此时A1的类型为</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A1</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="record-t-u" tabindex="-1"><a class="header-anchor" href="#record-t-u" aria-hidden="true">#</a> <code>Record&lt;T,U&gt;</code></h6><p>创建一个新的对象，实际类型参数T为联合类型将作为新对象类型的属性，类型参数U为对象类型属性的类型。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token operator">=</span> <span class="token string">&#39;a&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;b&#39;</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">B</span></span> <span class="token operator">=</span> <span class="token builtin">string</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A1</span></span> <span class="token operator">=</span> Record<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token punctuation">,</span><span class="token constant">B</span><span class="token operator">&gt;</span>
<span class="token comment">//等价为</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A1</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    a<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    b<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="pick-t-u" tabindex="-1"><a class="header-anchor" href="#pick-t-u" aria-hidden="true">#</a> <code>Pick&lt;T,U&gt;</code></h6><p>挑选出对象类型T中U对应的属性和类型，以此创建一个新的对象类型</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Vue</span> <span class="token punctuation">{</span>
	version<span class="token operator">:</span> <span class="token builtin">string</span>
    <span class="token function">component</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> object
<span class="token punctuation">}</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A1</span></span> <span class="token operator">=</span> Pick<span class="token operator">&lt;</span>Vue<span class="token punctuation">,</span><span class="token string">&#39;component&#39;</span><span class="token operator">&gt;</span>
<span class="token comment">//等价为</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A1</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">component</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> object<span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="omit-t-u" tabindex="-1"><a class="header-anchor" href="#omit-t-u" aria-hidden="true">#</a> <code>Omit&lt;T,U&gt;</code></h6><p>与Pick相反，挑选对象类型T中不在U中的属性和类型</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Vue</span> <span class="token punctuation">{</span>
	version<span class="token operator">:</span> <span class="token builtin">string</span>
    <span class="token function">component</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> object
<span class="token punctuation">}</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A1</span></span> <span class="token operator">=</span> Omit<span class="token operator">&lt;</span>Vue<span class="token punctuation">,</span><span class="token string">&#39;component&#39;</span><span class="token operator">&gt;</span>
<span class="token comment">//等价为</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A1</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    version<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="exclude-t-u" tabindex="-1"><a class="header-anchor" href="#exclude-t-u" aria-hidden="true">#</a> <code>Exclude&lt;T,U&gt;</code></h6><p>从类型T中剔除所有可以赋值给类型U的类型</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token operator">=</span> <span class="token string">&#39;a&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;b&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;c&#39;</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">B</span></span> <span class="token operator">=</span> <span class="token string">&#39;a&#39;</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A1</span></span> <span class="token operator">=</span> Exclude<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token punctuation">,</span><span class="token constant">B</span><span class="token operator">&gt;</span>
<span class="token comment">//等价为</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A1</span></span> <span class="token operator">=</span> <span class="token string">&#39;b&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;c&#39;</span>

<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">C</span></span> <span class="token operator">=</span> <span class="token builtin">string</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A2</span></span> <span class="token operator">=</span> Exclude<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token punctuation">,</span><span class="token constant">C</span><span class="token operator">&gt;</span>
<span class="token comment">//等价为</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A2</span></span> <span class="token operator">=</span> <span class="token builtin">never</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="extract-t-u" tabindex="-1"><a class="header-anchor" href="#extract-t-u" aria-hidden="true">#</a> <code>Extract&lt;T,U&gt;</code></h6><p>与Exclude相反</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token operator">=</span> <span class="token string">&#39;a&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;b&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;c&#39;</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">B</span></span> <span class="token operator">=</span> <span class="token string">&#39;a&#39;</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A1</span></span> <span class="token operator">=</span> Extract<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token punctuation">,</span><span class="token constant">B</span><span class="token operator">&gt;</span>
<span class="token comment">//等价为</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A1</span></span> <span class="token operator">=</span> <span class="token string">&#39;a&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="returntype-t" tabindex="-1"><a class="header-anchor" href="#returntype-t" aria-hidden="true">#</a> <code>ReturnType&lt;T&gt;</code></h6><p>获取函数返回值类型</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span>s<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token operator">:</span> s <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">t1</span> <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">string</span><span class="token operator">&gt;</span>           <span class="token comment">// string</span>
<span class="token keyword">type</span> <span class="token class-name">t2</span> <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span><span class="token punctuation">(</span>s<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token operator">&gt;</span>    <span class="token comment">// void</span>
<span class="token keyword">type</span> <span class="token class-name">t3</span> <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">&gt;</span>           <span class="token comment">// {}</span>
<span class="token keyword">type</span> <span class="token class-name">t4</span> <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">U</span></span><span class="token punctuation">,</span> <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">number</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span><span class="token operator">&gt;</span>  <span class="token comment">// number[]</span>
<span class="token keyword">type</span> <span class="token class-name">t5</span> <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> f1<span class="token operator">&gt;</span>     <span class="token comment">// { a: number,b: string }</span>
<span class="token keyword">type</span> <span class="token class-name">t6</span> <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span>           <span class="token comment">// any</span>
<span class="token keyword">type</span> <span class="token class-name">t7</span> <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span>nerver<span class="token operator">&gt;</span>        <span class="token comment">// any</span>
<span class="token keyword">type</span> <span class="token class-name">t8</span> <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span>        <span class="token comment">// Error</span>
<span class="token keyword">type</span> <span class="token class-name">t9</span> <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span><span class="token builtin">Function</span><span class="token operator">&gt;</span>      <span class="token comment">// Error</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_10-高级类型" tabindex="-1"><a class="header-anchor" href="#_10-高级类型" aria-hidden="true">#</a> 10. 高级类型</h3><h5 id="交叉类型" tabindex="-1"><a class="header-anchor" href="#交叉类型" aria-hidden="true">#</a> 交叉类型</h5><ol><li><p>将多个类型合并成为一个类型 &amp;</p></li><li><p>成员类型：</p><ol><li><p>可以为任意类型</p></li><li><p>当成员类型为原始类型的交叉类型时，结果类型为never。</p><p><code>type T1 = string &amp; number</code> =&gt;<code>never</code></p></li></ol></li><li><p>类型成员</p><p>类型成员由各个类型成员的属性成员的并集组成</p><p>属性成员的类型为各个成员类型的交叉类型</p></li><li><p>索引签名</p><p>当交叉类型的<strong>成员类型之一</strong>具有数字索引签名或者字符串索引签名时，</p><p>结果类型就包含相应的数字索引签名或者字符串索引签名，</p><p>并且结果类型的索引签名值类型是<strong>各个成员索引签名值类型的交叉类型</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// A 和 B 都具有数字索引签名</span>
<span class="token comment">// 所以结果类型 T 也具有数字索引签名 </span>
<span class="token comment">// 该数字索引签名值类型是 number&amp;string，即 never类型</span>
<span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">B</span></span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T</span></span> <span class="token operator">=</span> <span class="token constant">A</span> <span class="token operator">&amp;</span> <span class="token constant">B</span>
<span class="token keyword">const</span> s<span class="token operator">:</span> <span class="token constant">T</span> 
<span class="token keyword">let</span> a <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment">// const a : never</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 只有A 具有数字索引签名</span>
<span class="token comment">// 所以结果类型T 也具有数字索引签名</span>
<span class="token comment">// 该数字索引签名值类型是 number 类型</span>
<span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">B</span></span> <span class="token punctuation">{</span>
    <span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">void</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T</span></span> <span class="token operator">=</span> <span class="token constant">A</span> <span class="token operator">&amp;</span> <span class="token constant">B</span>
<span class="token keyword">const</span> s<span class="token operator">:</span> <span class="token constant">T</span> 
<span class="token keyword">let</span> a <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment">// const a : number</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>调用签名</p><p>大致和索引签名 一样</p></li><li></li></ol><h5 id="联合类型" tabindex="-1"><a class="header-anchor" href="#联合类型" aria-hidden="true">#</a> 联合类型</h5><ol><li><p>由两个及以上的成员类型构成 |</p></li><li><p>类型成员</p><p>类型成员由各个类型成员的属性成员的交集组成</p><p>属性成员的类型为各个成员类型的联合类型</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 类型T上的属性成员 只能是A和B属性成员的交集</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    version<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">B</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    version<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T</span></span> <span class="token operator">=</span> <span class="token constant">A</span> <span class="token operator">|</span> <span class="token constant">B</span>
<span class="token keyword">const</span> s<span class="token operator">:</span> <span class="token constant">T</span>
s<span class="token punctuation">.</span>version
s<span class="token punctuation">.</span>a  <span class="token comment">//ERROR</span>
s<span class="token punctuation">.</span>b  <span class="token comment">//ERROR</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>索引签名</p><p>当联合类型的成员类型<strong>同时具有</strong>数字索引或者字符串索引时，结果类型中才包含相应的数字索引签名或者字符串索引签名，结果类型的索引签名值类型是<strong>各个成员类型索引签名值类型的联合类型</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 索引签名 同时为 number类型</span>
<span class="token comment">// 所以 结果类型的索引签名值类型为 string | number</span>
<span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">B</span></span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T</span></span> <span class="token operator">=</span> <span class="token constant">A</span><span class="token operator">|</span><span class="token constant">B</span>
<span class="token keyword">const</span> s<span class="token operator">:</span> <span class="token constant">T</span>
<span class="token keyword">let</span> a <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment">// let a : string | number</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 索引签名 分别为 number 和 string </span>
<span class="token comment">// 所以结果类型不具有索引签名</span>
<span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">C</span></span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">D</span></span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T</span></span> <span class="token operator">=</span> <span class="token constant">A</span><span class="token operator">|</span><span class="token constant">B</span>
<span class="token keyword">const</span> s<span class="token operator">:</span> <span class="token constant">T</span>
<span class="token keyword">let</span> a <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token comment">//ERROR</span>
<span class="token keyword">let</span> a <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">]</span>  <span class="token comment">//ERROR</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h5 id="class类" tabindex="-1"><a class="header-anchor" href="#class类" aria-hidden="true">#</a> class类</h5><p>类继承的两种方式：</p><pre><code>1. extends（继承父类）
 - 一个新的接口或者类，从父类或者接口继承所有的属性和方法
 - 不可以重写属性，但可以重写方法
 - 接口可以继承接口或者类，类只能继承类
2. implements（实现接口）
 - 实现 一个新的类，从父类或者接口实现所有的属性和方法
 - 可以重写属性和方法，包含一些新的功能
 - 类可以实现接口或者类，一个类可以实现多个接口
 - 一般来讲，一个类只能继承自另一个类，有时候不同类之间可以有一些共有的特性，可以提取出共有的特性，用implements实现
</code></pre><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 门(Door) 是一个类，防盗门(SecurityDoor)是一个子类。</span>
<span class="token comment">// 如果防盗门有一个报警器的功能，我们给防盗门一个报警方法</span>
<span class="token comment">// 车也有报警功能，就可以考虑把报警器提取出来(Alarm)</span>
<span class="token comment">// 作为一个接口，防盗门和车都可以去实现</span>
<span class="token keyword">class</span> <span class="token class-name">Door</span><span class="token punctuation">{</span> 
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">Alarm</span><span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">SecurityDoor</span> <span class="token keyword">extends</span> <span class="token class-name">Door</span> <span class="token keyword">implements</span> <span class="token class-name">Alarm</span><span class="token punctuation">{</span>
	<span class="token function">alert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;SecurityDoor Alert&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token keyword">implements</span> <span class="token class-name">Alarm</span><span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Car Alert&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">//一个类可以实现多个接口</span>
<span class="token keyword">class</span> <span class="token class-name">Alarm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">Light</span><span class="token punctuation">{</span>
	<span class="token function">lightOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
    <span class="token function">lightOff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token keyword">implements</span> <span class="token class-name">Alarm</span><span class="token punctuation">,</span>Light<span class="token punctuation">{</span>
	<span class="token function">alert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Car Alert&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">lightOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Car light on&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">lightOff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Car light off&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_11-协变与逆变" tabindex="-1"><a class="header-anchor" href="#_11-协变与逆变" aria-hidden="true">#</a> 11. 协变与逆变</h3><h5 id="协变" tabindex="-1"><a class="header-anchor" href="#协变" aria-hidden="true">#</a> 协变</h5><p>子类型能够赋值给父类型</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 子类型比父类型更具体（属性更多）</span>
<span class="token comment">// Son 是 Name 和 Age 的共有子类型</span>
<span class="token keyword">interface</span> <span class="token class-name">Name</span><span class="token punctuation">{</span>
	name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">interface</span> <span class="token class-name">Age</span><span class="token punctuation">{</span>
	age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">interface</span> <span class="token class-name">Son</span><span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> t0<span class="token operator">:</span> Name
<span class="token keyword">let</span> t1<span class="token punctuation">;</span> Age
<span class="token keyword">let</span> t2<span class="token operator">:</span> Son

<span class="token comment">// 类型不相关 不能进行赋值（不具备父子关系）</span>
t0 <span class="token operator">=</span> t1 <span class="token comment">//ERROR</span>

<span class="token comment">// 子类型可以赋值  协变</span>
t0 <span class="token operator">=</span> t2 
t1 <span class="token operator">=</span> t2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="逆变" tabindex="-1"><a class="header-anchor" href="#逆变" aria-hidden="true">#</a> 逆变</h5><p>父类型可以赋值给子类型，与协变相反</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> <span class="token function-variable function">getName</span><span class="token operator">:</span> <span class="token punctuation">(</span>param<span class="token operator">:</span> Name<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>
<span class="token function-variable function">getNmae</span> <span class="token operator">=</span> <span class="token punctuation">(</span>param<span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>param<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> <span class="token function-variable function">getSex</span><span class="token operator">:</span> <span class="token punctuation">(</span>param<span class="token operator">:</span> Son<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>
<span class="token function-variable function">getSex</span> <span class="token operator">=</span> <span class="token punctuation">(</span>param<span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>param<span class="token punctuation">.</span>sex<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// getSex 要求参数是 Son，getName 要求参数是 Name</span>
<span class="token comment">// 因为 Name 是父类型，当把父类型赋值给子类型时，使用参数都是在父类型范围类</span>
<span class="token comment">// 所以在子类型来看是安全的</span>
getSex <span class="token operator">=</span> getName
<span class="token comment">// 反之，子类型赋值给父类型时，因为子类型会用到age,sex，这超出了父类型的范围</span>
<span class="token comment">// 所以TS认为这是不安全的</span>
getName <span class="token operator">=</span> getSex <span class="token comment">// ERROR</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_12-校验函数" tabindex="-1"><a class="header-anchor" href="#_12-校验函数" aria-hidden="true">#</a> 12. 校验函数</h3><h4 id="_12-1-instanceof" tabindex="-1"><a class="header-anchor" href="#_12-1-instanceof" aria-hidden="true">#</a> 12.1 instanceOf</h4><p>校验值是否属于某一类型</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span>
    user<span class="token operator">:</span> <span class="token function">instanceOf</span><span class="token punctuation">(</span>User<span class="token punctuation">)</span>
    title<span class="token operator">:</span> <span class="token function">instanceOf</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="oneof" tabindex="-1"><a class="header-anchor" href="#oneof" aria-hidden="true">#</a> oneOf</h5><p>oneOf 值必须为指定范围内的任意值</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token punctuation">{</span>
	type<span class="token operator">:</span> <span class="token generic-function"><span class="token function">oneOf</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token string">&#39;success&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;fail&#39;</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;success&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;fail&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token comment">//等价为</span>
    type<span class="token operator">:</span> <span class="token generic-function"><span class="token function">onOf</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token string">&#39;success&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;fail&#39;</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;success&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;fail&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="oneoftype" tabindex="-1"><a class="header-anchor" href="#oneoftype" aria-hidden="true">#</a> oneOfType</h5><p>oneOfType 值必须为指定范围内的任意定义</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token punctuation">{</span>
  <span class="token comment">//oneOfType 降校验传入的值，是否在指定类型内，且可以与类型定义函数组合使用</span>
  data<span class="token operator">:</span> <span class="token function">oneOfType</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Number<span class="token punctuation">,</span> <span class="token generic-function"><span class="token function">Object</span><span class="token generic class-name"><span class="token operator">&lt;</span>user<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">//注意：oneOfType 内部接收的是类型，类型定义的公共函数是无效的</span>
<span class="token punctuation">{</span>
  key<span class="token operator">:</span> <span class="token function">oneOfType</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">def</span><span class="token punctuation">(</span><span class="token string">&#39;defKey&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>isRequired
  <span class="token comment">//这里 string().def(&#39;defKey&#39;) 是无效的，并不能屏蔽 isRequired</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="arrayof" tabindex="-1"><a class="header-anchor" href="#arrayof" aria-hidden="true">#</a> arrayOf</h5><p>指定数组类型校验</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token punctuation">{</span>
    <span class="token comment">//单一类型</span>
	keys<span class="token operator">:</span> <span class="token function">arrayOf</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token comment">//联合类型</span>
    <span class="token comment">//string[] | number[]</span>
    keys<span class="token operator">:</span> <span class="token function">arrayOf</span><span class="token punctuation">(</span><span class="token function">oneOfType</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="objectof" tabindex="-1"><a class="header-anchor" href="#objectof" aria-hidden="true">#</a> objectOf</h5><p>对象属性值校验</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token punctuation">{</span>
    maps<span class="token operator">:</span> <span class="token function">ObjectOf</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">def</span><span class="token punctuation">(</span><span class="token punctuation">{</span>source<span class="token operator">:</span> <span class="token string">&#39;xx&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
	maps<span class="token operator">:</span> <span class="token function">ObjectOf</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">def</span><span class="token punctuation">(</span><span class="token punctuation">{</span>source<span class="token operator">:</span> <span class="token number">00</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">//ERROR</span>
<span class="token punctuation">}</span>
<span class="token comment">//可以与 oneOfType 一起使用</span>
<span class="token punctuation">{</span>
	keys<span class="token operator">:</span> <span class="token function">ObjectOf</span><span class="token punctuation">(</span><span class="token function">oneOfType</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">def</span><span class="token punctuation">(</span><span class="token punctuation">{</span>a<span class="token operator">:</span><span class="token string">&#39;k&#39;</span><span class="token punctuation">,</span>b<span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="shape" tabindex="-1"><a class="header-anchor" href="#shape" aria-hidden="true">#</a> shape</h5><p>定义对象的具体结构</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">User</span><span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
    age<span class="token operator">:</span> <span class="token builtin">number</span>
<span class="token punctuation">}</span>
<span class="token punctuation">{</span>
	user<span class="token operator">:</span> <span class="token generic-function"><span class="token function">shap</span><span class="token generic class-name"><span class="token operator">&lt;</span>User<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        name<span class="token operator">:</span> <span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        age<span class="token operator">:</span> <span class="token function">number</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="custom" tabindex="-1"><a class="header-anchor" href="#custom" aria-hidden="true">#</a> custom</h5><p>自定义校验函数</p>`,138);function c(l,i){return s(),a("div",null,[e(" more "),o])}const u=n(t,[["render",c],["__file","ts.html.vue"]]);export{u as default};
