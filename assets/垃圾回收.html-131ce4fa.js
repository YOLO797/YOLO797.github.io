import{_ as a,W as e,X as r,Y as h,a2 as i}from"./framework-fe863d21.js";const d={},n=i('<h3 id="_1-概念" tabindex="-1"><a class="header-anchor" href="#_1-概念" aria-hidden="true">#</a> 1. 概念</h3><p>垃圾回收机制（GC）</p><h4 id="_1-1-何为垃圾" tabindex="-1"><a class="header-anchor" href="#_1-1-何为垃圾" aria-hidden="true">#</a> 1.1 何为垃圾</h4><ul><li>对象不再被引用时就是垃圾</li><li>对象不能从根上访问到时就是垃圾（对象不是可达对象 = 垃圾）</li></ul><h4 id="_1-2-可达对象" tabindex="-1"><a class="header-anchor" href="#_1-2-可达对象" aria-hidden="true">#</a> 1.2 可达对象</h4><ul><li>可以访问到的对象（通过引用、作用域链可以直接查找到）</li><li>从根出发看是否能被找到</li><li>根可以理解为全局变量对象（全局执行上下文）</li></ul><h3 id="_2-gc算法" tabindex="-1"><a class="header-anchor" href="#_2-gc算法" aria-hidden="true">#</a> 2. GC算法</h3><h4 id="_2-1-引用计数" tabindex="-1"><a class="header-anchor" href="#_2-1-引用计数" aria-hidden="true">#</a> 2.1 引用计数</h4><p>通过一个数字判断当前对象是不是垃圾</p><h4 id="_2-2-标记清除" tabindex="-1"><a class="header-anchor" href="#_2-2-标记清除" aria-hidden="true">#</a> 2.2 标记清除</h4><p>在GC工作时给活动对象添加一个标记，来判断他是否是一个垃圾</p><h4 id="_2-3-标记整理" tabindex="-1"><a class="header-anchor" href="#_2-3-标记整理" aria-hidden="true">#</a> 2.3 标记整理</h4><h4 id="_2-4-分代回收" tabindex="-1"><a class="header-anchor" href="#_2-4-分代回收" aria-hidden="true">#</a> 2.4 分代回收</h4>',13);function t(c,_){return e(),r("div",null,[h(" more "),n])}const s=a(d,[["render",t],["__file","垃圾回收.html.vue"]]);export{s as default};
