import{_ as n,W as s,X as a,Y as t,a1 as e}from"./framework-b609eea8.js";const p={},o=e(`<h3 id="_1-for-in" tabindex="-1"><a class="header-anchor" href="#_1-for-in" aria-hidden="true">#</a> 1. for...in...</h3><h3 id="_2-object-keys" tabindex="-1"><a class="header-anchor" href="#_2-object-keys" aria-hidden="true">#</a> 2. Object.keys</h3><h3 id="_3-object-values" tabindex="-1"><a class="header-anchor" href="#_3-object-values" aria-hidden="true">#</a> 3. Object.values</h3><h3 id="_4-object-entries" tabindex="-1"><a class="header-anchor" href="#_4-object-entries" aria-hidden="true">#</a> 4. Object.entries</h3><p>​ 用于获取对象自身所有的可枚举的属性值，但不包括原型中的属性，然后返回二维数组。每一个子数组由对象的属性名、属性值组成。</p><p>​ 是一种可以同时拿到属性名和属性值的方法。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span> <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// 0: h</span>
<span class="token comment">// 1: e</span>
<span class="token comment">// 2: l</span>
<span class="token comment">// 3: l</span>
<span class="token comment">// 4: o</span>


<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">]</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span> <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// 0: a</span>
<span class="token comment">// 1: b</span>
<span class="token comment">// 2: c</span>

<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;tom&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">}</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span> <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// name: tom</span>
<span class="token comment">// age: 18</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-object-getownpropertyname" tabindex="-1"><a class="header-anchor" href="#_5-object-getownpropertyname" aria-hidden="true">#</a> 5. Object.getOwnPropertyName()</h3><p>​ 获取对象自身所有的可枚举的属性值（不包括Sysbol值作为名称的属性），但不包括原型中的原型。返回一个由 <strong>属性名</strong> 组成的数组。</p><h3 id="_6-object-getownpropertysymbols" tabindex="-1"><a class="header-anchor" href="#_6-object-getownpropertysymbols" aria-hidden="true">#</a> 6. Object.getOwnPropertySymbols()</h3><p>​ 用于获取指定对象的所有Symbol属性名。返回一个 <strong>数组</strong> ，成员是当前对象的所有用作属性名的Symbol值。</p>`,11);function c(i,l){return s(),a("div",null,[t(" more "),o])}const r=n(p,[["render",c],["__file","对象遍历.html.vue"]]);export{r as default};
