import{_ as s,W as a,X as e,Y as t,$ as n,a0 as p,a1 as o}from"./framework-b609eea8.js";const c={},l=n("p",null,[n("code",null,"new"),p(" 运算符用于创建一个自定义对象实例，或者具有构造函数的内置对象的实例。")],-1),i=o(`<h3 id="_1-实现思路" tabindex="-1"><a class="header-anchor" href="#_1-实现思路" aria-hidden="true">#</a> 1. 实现思路</h3><ul><li>步骤一：创建构造函数的实例对象，将这个对象的 <code>__proto__</code> 指向构造函数的 <code>prototype</code></li><li>步骤二：将构造函数当作普通函数执行，并改变 <code>this</code> 的指向</li><li>步骤三：分析构造函数的返回值 <ul><li>返回值为 <code>object</code> 或者 <code>function</code> 类型，直接作为 <code>new</code> 方法的返回值返回</li><li>否则 返回 构造函数的实例对象</li></ul></li></ul><h3 id="_2-手写实现" tabindex="-1"><a class="header-anchor" href="#_2-手写实现" aria-hidden="true">#</a> 2. 手写实现</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Func ：要操作的构造函数（最后要创建这个构造函数的实例）</span>
<span class="token comment">// args ：存储未来传递给构造函数 Func 的实参</span>

<span class="token keyword">function</span> <span class="token function">myNew</span><span class="token punctuation">(</span><span class="token parameter">Func<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token comment">// 1. 创建一个新的对象，将__proto__指向 Func.prototype</span>
  <span class="token keyword">let</span> instance <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Func</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>
  <span class="token comment">// 2. 执行构造函数Func</span>
  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">Func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> args<span class="token punctuation">)</span>
  <span class="token comment">// 3. 判断结果</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>result <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(object|function)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> result
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> instance
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-测试用例" tabindex="-1"><a class="header-anchor" href="#_3-测试用例" aria-hidden="true">#</a> 3. 测试用例</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
<span class="token punctuation">}</span>

<span class="token keyword">const</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;zhangsan&#39;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;new:&#39;</span><span class="token punctuation">,</span> p1<span class="token punctuation">)</span>      <span class="token comment">// new: Person {name: &#39;zhangsan&#39;, age: 18}</span>

<span class="token keyword">const</span> p2 <span class="token operator">=</span> <span class="token function">myNew</span><span class="token punctuation">(</span>Person<span class="token punctuation">,</span> <span class="token string">&#39;zhangsan&#39;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;myNew:&#39;</span><span class="token punctuation">,</span> p2<span class="token punctuation">)</span>    <span class="token comment">// myNew: Person {name: &#39;zhangsan&#39;, age: 18}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6);function u(r,d){return a(),e("div",null,[l,t(" more "),i])}const m=s(c,[["render",u],["__file","实现new运算符.html.vue"]]);export{m as default};
