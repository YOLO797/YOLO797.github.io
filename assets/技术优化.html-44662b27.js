import{_ as a,W as e,X as n,Y as s,$ as i,a1 as d}from"./framework-b609eea8.js";const c={},o=i("p",null,"性能优化之基础web技术层面",-1),r=d(`<h3 id="_1-tree-shaking" tabindex="-1"><a class="header-anchor" href="#_1-tree-shaking" aria-hidden="true">#</a> 1. tree-shaking</h3><p>清除我们项目中的一些无用代码，它依赖于 <code>ES</code> 中的模块语法。</p><p>比如日常使用 <code>lodash</code> 时：</p><p><code>import _ from &#39;lodash&#39;</code> ，这种会把整个包打入到我们的 <code>bundle</code>中，</p><p><code>import _isEmpty from &#39;lodash/isEmpty&#39;</code>，只会把 <code>isEmpty</code> 抽离出来打入，</p><p>大大减少我们包的大小。</p><h3 id="_2-分包" tabindex="-1"><a class="header-anchor" href="#_2-分包" aria-hidden="true">#</a> 2. 分包</h3><p>按需加载 进行分包</p><h3 id="_3-gzip-压缩" tabindex="-1"><a class="header-anchor" href="#_3-gzip-压缩" aria-hidden="true">#</a> 3. gzip 压缩</h3><ul><li><p>安装</p><div class="language-ini line-numbers-mode" data-ext="ini"><pre class="language-ini"><code>npm install compression --save
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>添加代码逻辑</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> compression <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;compression&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">compression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>重启服务，观察网络面板里面的 <code>response header</code></p></li></ul><h3 id="_4-图片压缩" tabindex="-1"><a class="header-anchor" href="#_4-图片压缩" aria-hidden="true">#</a> 4. 图片压缩</h3><h3 id="_5-雪碧图" tabindex="-1"><a class="header-anchor" href="#_5-雪碧图" aria-hidden="true">#</a> 5. 雪碧图</h3><h3 id="_6-cdn-使用" tabindex="-1"><a class="header-anchor" href="#_6-cdn-使用" aria-hidden="true">#</a> 6. CDN 使用</h3><p><code>CDN</code> 可以通过不同的域名来加载文件，从而使下载文件的并发连接数大大增加，且 <code>CDN</code>具有更好的可用性，更低的网络延迟和丢包率</p><h3 id="_7-浏览器缓存" tabindex="-1"><a class="header-anchor" href="#_7-浏览器缓存" aria-hidden="true">#</a> 7. 浏览器缓存</h3><h3 id="_8-懒加载" tabindex="-1"><a class="header-anchor" href="#_8-懒加载" aria-hidden="true">#</a> 8. 懒加载</h3><p>延迟加载，当可视区域没有滚到资源需要加载的地方的时候，可视区域外的资源不会加载。</p><p>可以减少服务器负载，常适用于图片很多，页面较长的业务场景中。</p><h3 id="_9-并发请求" tabindex="-1"><a class="header-anchor" href="#_9-并发请求" aria-hidden="true">#</a> 9. 并发请求</h3><p>如果需要同时请求多个接口，可以使用并发请求来提高页面的加载速度和用户体验。</p><p>如：<code>Promise.all()</code></p><h3 id="_10-http2-0" tabindex="-1"><a class="header-anchor" href="#_10-http2-0" aria-hidden="true">#</a> 10. http2.0</h3>`,22);function t(p,h){return e(),n("div",null,[o,s(" more "),r])}const u=a(c,[["render",t],["__file","技术优化.html.vue"]]);export{u as default};
