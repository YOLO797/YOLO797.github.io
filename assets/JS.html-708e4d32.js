import{_ as n,W as s,X as a,Y as e,a1 as t}from"./framework-b609eea8.js";const o={},c=t(`<h3 id="_1-统计出现次数最多的字符和次数" tabindex="-1"><a class="header-anchor" href="#_1-统计出现次数最多的字符和次数" aria-hidden="true">#</a> 1. 统计出现次数最多的字符和次数</h3><p>判断一个字符串中出现最多的字符，并统计其次数?</p><div class="hint-container info"><p class="hint-container-title">核心算法</p><ol><li>利用 <code>charAt()</code> 遍历字符串，从一个字符串中返回指定的字符</li><li>把每个字符当作 <code>key</code> 存储给对象，如果该对象没有该属性，就给它赋值为1，如果存在该属性就 +1</li><li>遍历对象，得到最大的值和出现次数</li></ol></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">charAtString</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> chars <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>chars<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      obj<span class="token punctuation">[</span>chars<span class="token punctuation">]</span><span class="token operator">++</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
      obj<span class="token punctuation">[</span>chars<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>    <span class="token comment">//  { a:4,b:2,d:1,c:1 }</span>
  
  <span class="token comment">// 遍历对象，得到最大的值和出现次数</span>
  <span class="token keyword">var</span> max <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">var</span> ch <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">&gt;</span> max<span class="token punctuation">)</span><span class="token punctuation">{</span>
      max <span class="token operator">=</span> obj<span class="token punctuation">[</span>k<span class="token punctuation">]</span>
      ch <span class="token operator">=</span> key
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>ch<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 出现次数最多，次数为：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>max<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>    <span class="token comment">// a出现次数最多，次数为：4</span>
<span class="token punctuation">}</span>

<span class="token function">charAtString</span><span class="token punctuation">(</span><span class="token string">&#39;aaabdbac&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-判断是否回文" tabindex="-1"><a class="header-anchor" href="#_2-判断是否回文" aria-hidden="true">#</a> 2. 判断是否回文</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> str <span class="token operator">!==</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token operator">===</span> str
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;HellolleH&quot;</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span>      <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-事件是如何实现的" tabindex="-1"><a class="header-anchor" href="#_3-事件是如何实现的" aria-hidden="true">#</a> 3. 事件是如何实现的</h3><div class="hint-container info"><p class="hint-container-title">参考答案</p><p>基于发布订阅模式，就是在浏览器加载的时候会读取事件的相关代码，但只有等到具体事件触发的时候才会执行。</p><p>常见的 <code>DOM</code> 事件：</p><ul><li><code>DOM</code> 0 级事件：直接绑定在 <code>v-html</code> 上的 <code>on-event</code>，如 <code>onClick</code>，同一个事件只能有一个处理程序</li><li><code>DOM</code> 2 级事件：通过 <code>addEventListener</code> 、<code>removeEventListener</code> 监听，一个事件可以有多个事件处理程序，按顺序执行，捕获事件和冒泡事件</li><li><code>DOM</code> 3 级事件：增加事件类型，如 <code>UI</code>事件，焦点事件，鼠标事件</li></ul></div><h3 id="_4-判断数组的方法" tabindex="-1"><a class="header-anchor" href="#_4-判断数组的方法" aria-hidden="true">#</a> 4. 判断数组的方法</h3><div class="hint-container info"><p class="hint-container-title">参考答案</p><ul><li><code>arr instanceOf Array</code> ：判断某个实例是否属于某个对象</li><li><code>arr.constructor === Array</code></li><li><code>Array.prototype.isPrototypeOf(arr)</code>：测试一个对象是否存在于另一个对象的原型链上</li><li><code>Object.prototype.toString.call(arr) === &#39;[object Array]&#39;</code></li><li><code>Object.getPrototypeOf(arr) === Array.prototype</code></li><li><code>Array.isArray(arr)</code></li></ul></div><h3 id="_5-数组和类数组区别" tabindex="-1"><a class="header-anchor" href="#_5-数组和类数组区别" aria-hidden="true">#</a> 5. 数组和类数组区别</h3><div class="hint-container info"><p class="hint-container-title">参考答案</p><ul><li>一个是数组，一个是对象</li><li>数组的 <code>length</code> 属性，当新的元素添加到列表中时，其值会自动更新。类数组对象的不会</li><li>设置数组的 <code>length</code> 属性可以扩展或阶段数组</li><li>数组也是 <code>Array</code> 的实例，可以调用 <code>Array</code> 的方法，如 <code>push</code> 、<code>pop</code></li></ul></div><p>即 <code>arguments</code> 对象不是一个 <code>Array</code>，它只是类似数组，但除了 <code>length</code> 属性和索引元素之外没有数组的任何属性。</p><p>可以使用 <code>for...in</code> 来遍历 <code>arguments</code> 这个类数组对象。</p><h3 id="_6-ajax-axios-fetch" tabindex="-1"><a class="header-anchor" href="#_6-ajax-axios-fetch" aria-hidden="true">#</a> 6. ajax\\axios\\fetch</h3><div class="hint-container info"><p class="hint-container-title">参考答案</p><p><code>ajax</code>：</p><ul><li>局部刷新，无需重载整个页面</li><li>本身是针对 <code>MVC</code> 框架而生，多用于 <code>jQuery</code>，不符合现在 <code>MVVM</code> 的浪潮</li></ul><p><code>fetch</code>：</p><ul><li>使用的是原生 <code>js</code></li><li>只针对网络请求报错，对 400 、500都当成成功的请求，需要封装去处理</li><li>默认不会带 <code>cokkie</code>，需要添加配置项</li><li>兼容性差</li></ul><p><code>axios</code>：</p><ul><li>基于 <code>ajax</code> 封装</li><li>为 <code>MVVM</code> 框架而生（ <code>vue</code> 、<code>react</code> ）</li><li>支持 <code>Promise API</code></li><li>支持并发请求</li><li>支持 <code>request</code>和 <code>response</code>的拦截，请求拦截可以用于日志和权限等，相应拦截可以用于格式化等</li><li>自动转换 <code>JSON</code> 数据</li></ul></div>`,16);function p(i,l){return s(),a("div",null,[e(" more "),c])}const u=n(o,[["render",p],["__file","JS.html.vue"]]);export{u as default};
