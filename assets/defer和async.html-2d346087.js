import{_ as e,W as c,X as r,Y as d,$ as a,a1 as o}from"./framework-b609eea8.js";const t={},s=a("p",null,"defer和async是script的两个标签，用于在不阻塞页面文档解析的前提下，控制脚本的下载和执行。",-1),i=o('<h3 id="_1-页面的加载和渲染过程" tabindex="-1"><a class="header-anchor" href="#_1-页面的加载和渲染过程" aria-hidden="true">#</a> 1. 页面的加载和渲染过程</h3><ol><li>浏览器通过 <code>HTTP</code> 协议请求服务器，获取 <code>HTML</code> 文档并开始从上到下解析，构建 <code>DOM</code></li><li>在构建过程中，如果遇到外联样式声名和脚本声明，则暂停文档解析，创建新的网络连接，并开始下载样式文件和脚本文件</li><li>样式文件和脚本文件下载完成后，解析并执行，然后继续文档解析</li><li>解析完成后，视图渲染到浏览器窗口</li></ol><p>在这个过程中，<strong>脚本文件的下载和执行是与文档解析同步进行，即它会阻塞文档解析</strong>，会造成白屏等影响。</p><h3 id="_2-defer" tabindex="-1"><a class="header-anchor" href="#_2-defer" aria-hidden="true">#</a> 2. defer</h3><p>用于开启新的线程下载脚本文件，并使脚本在文档解析完成后执行。即<strong>脚本会被延迟到整个页面都解析完毕后在运行</strong>。因此，在 <code>&lt;script&gt;</code> 元素种设置 <code>defer</code> 属性，相当于告诉浏览器 <mark>立即下载，延迟执行</mark></p><p>如果有多个 <code>defer</code> 脚本，会按照它们在页面出现的顺序加载</p><h3 id="_3-async" tabindex="-1"><a class="header-anchor" href="#_3-async" aria-hidden="true">#</a> 3. async</h3><p>新增属性，用于异步下载脚本文件，下载完毕后立即解析执行文件。与 <code>defer</code> 不同的是，标记为 <code>async</code> 的脚本并不保证按照它们的先后顺序执行。</p><p>如果有多个 <code>async</code> 脚本，不能保证加载顺序，是乱序的</p><h3 id="_4-区别" tabindex="-1"><a class="header-anchor" href="#_4-区别" aria-hidden="true">#</a> 4. 区别</h3><ul><li><p><code>&lt;script src=&quot;script.js&quot;&gt;&lt;/script&gt;</code></p><p>浏览器立即加载并执行指定的脚本，“立即”指的是在渲染该 <code>script</code> 标签之下是文档元素之前，也就是说不等待后续载入的文档元素，<mark>读到就加载并执行</mark></p></li><li><p><code>&lt;script src=&quot;script.js&quot; async&gt;&lt;/script&gt;</code></p><p><code>async</code> ，<mark>加载和渲染</mark>后续文档元素的过程将和 <code>script.js</code> 的加载与执行<mark>并行进行</mark>（异步）</p></li><li><p><code>&lt;script src=&quot;script.js&quot; defer&gt;&lt;/script&gt;</code></p><p><code>defer</code>，<mark>加载</mark>后续文档元素的过程将和 <code>script.js</code> 的加载<mark>并行进行</mark>（异步），但<mark>执行要在所有元素解析完成后</mark>， <code>DOMContentLoaded</code>事件触发之前完成</p></li></ul>',11);function n(p,l){return c(),r("div",null,[s,d(" more "),i])}const _=e(t,[["render",n],["__file","defer和async.html.vue"]]);export{_ as default};
