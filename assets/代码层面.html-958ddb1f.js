import{_ as a,W as n,X as e,Y as s,$ as t,a1 as c}from"./framework-b609eea8.js";const i={},o=t("p",null,"性能优化之代码层面",-1),d=c(`<h3 id="_1-v-if-和-v-show-区分使用" tabindex="-1"><a class="header-anchor" href="#_1-v-if-和-v-show-区分使用" aria-hidden="true">#</a> 1. v-if 和 v-show 区分使用</h3><h3 id="_2-computed-和-watch-区分使用" tabindex="-1"><a class="header-anchor" href="#_2-computed-和-watch-区分使用" aria-hidden="true">#</a> 2. computed 和 watch 区分使用</h3><h3 id="_3-v-for-遍历必须有-key-且避免同时使用-v-if" tabindex="-1"><a class="header-anchor" href="#_3-v-for-遍历必须有-key-且避免同时使用-v-if" aria-hidden="true">#</a> 3. v-for 遍历必须有 key，且避免同时使用 v-if</h3><h3 id="_4-长列表性能优化" tabindex="-1"><a class="header-anchor" href="#_4-长列表性能优化" aria-hidden="true">#</a> 4. 长列表性能优化</h3><p><code>Object.freeze()</code> ：当数据只是展示 ，不需要动态变化时，用<code>Object.freeze()</code>可以冻结一个对象，一旦冻结就再也不能修改</p><h3 id="_5-事件的销毁" tabindex="-1"><a class="header-anchor" href="#_5-事件的销毁" aria-hidden="true">#</a> 5. 事件的销毁</h3><p><code>vue</code> 组件销毁时，会自动清理它与其他实例的连接，解绑它的全部指令及事件监听器，但仅限于组件本身的事件。如果在 <code>js</code> 内使用 <code>addEventListener</code> 等方式是不会自动销毁的，我们需要在组件销毁时手动移除这个事件的监听，以免造成内存泄漏</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>click<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">beforeDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>click<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-图片资源懒加载、雪碧图" tabindex="-1"><a class="header-anchor" href="#_6-图片资源懒加载、雪碧图" aria-hidden="true">#</a> 6. 图片资源懒加载、雪碧图</h3><h3 id="_7-路由懒加载" tabindex="-1"><a class="header-anchor" href="#_7-路由懒加载" aria-hidden="true">#</a> 7. 路由懒加载</h3><p><code>SPA</code>单页面，可能会引入很多的路由，当进入首页时，加载资源过多会导致首页白屏，不利于用户体验</p><h3 id="_8-第三方插件按需引入" tabindex="-1"><a class="header-anchor" href="#_8-第三方插件按需引入" aria-hidden="true">#</a> 8. 第三方插件按需引入</h3><h3 id="_9-优化无限列表性能" tabindex="-1"><a class="header-anchor" href="#_9-优化无限列表性能" aria-hidden="true">#</a> 9. 优化无限列表性能</h3><p>页面存在非常长或者无限滚动的列表，需要采用 窗口化 的技术来优化性能，只喧染少部分区域的内容，减少重新渲染组件和创建 <code>dom</code> 节点的时间</p><h3 id="_10-ssr-或者-预渲染" tabindex="-1"><a class="header-anchor" href="#_10-ssr-或者-预渲染" aria-hidden="true">#</a> 10. ssr 或者 预渲染</h3>`,15);function r(p,l){return n(),e("div",null,[o,s(" more "),d])}const u=a(i,[["render",r],["__file","代码层面.html.vue"]]);export{u as default};
