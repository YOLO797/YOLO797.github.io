import{_ as a,W as s,X as e,Y as t,$ as n,a1 as p}from"./framework-b609eea8.js";const o={},c=n("p",null,"防抖：当频繁触发该事件，一段时间后没有再触发，页面才开始执行。",-1),i=n("p",null,"节流：设置一个特定的时间，在这个时间内 只执行一次，不会频繁执行。",-1),l=p(`<h3 id="_1-防抖" tabindex="-1"><a class="header-anchor" href="#_1-防抖" aria-hidden="true">#</a> 1. 防抖</h3><h4 id="_1-1-定义" tabindex="-1"><a class="header-anchor" href="#_1-1-定义" aria-hidden="true">#</a> 1.1 定义</h4><p>触发事件后，n秒后才执行，如果在触发的n秒内又触发了这个事件，则重新计时。即要等你触发完事件n秒内不在触发事件才执行。</p><h4 id="_1-2-常见应用场景" tabindex="-1"><a class="header-anchor" href="#_1-2-常见应用场景" aria-hidden="true">#</a> 1.2 常见应用场景</h4><ul><li>搜索框：等用户完整输入内容后在发送请求</li><li>按钮提交场景：防止多次提交按钮，只执行最后一次提交</li></ul><h4 id="_1-3-手写实现" tabindex="-1"><a class="header-anchor" href="#_1-3-手写实现" aria-hidden="true">#</a> 1.3 手写实现</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> wait</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>
    timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
      <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>wait<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-节流" tabindex="-1"><a class="header-anchor" href="#_2-节流" aria-hidden="true">#</a> 2. 节流</h3><h4 id="_2-1-定义" tabindex="-1"><a class="header-anchor" href="#_2-1-定义" aria-hidden="true">#</a> 2.1 定义</h4><p>设置一个特定的时间，在这个时间内，无论触发多少次事件，只执行一次。</p><h4 id="_2-2-常见应用场景" tabindex="-1"><a class="header-anchor" href="#_2-2-常见应用场景" aria-hidden="true">#</a> 2.2 常见应用场景</h4><ul><li>鼠标的移入移出，页面的滚动</li><li>浏览器的拖拽，固定时间内只执行一次</li><li>浏览器的缩放</li></ul><h4 id="_2-3-手写实现" tabindex="-1"><a class="header-anchor" href="#_2-3-手写实现" aria-hidden="true">#</a> 2.3 手写实现</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> wait <span class="token operator">=</span> <span class="token number">500</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">let</span> lasttime <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> nowtime <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>nowtime <span class="token operator">-</span> lasttime <span class="token operator">&gt;</span> wait<span class="token punctuation">)</span><span class="token punctuation">{</span>
      lasttime <span class="token operator">=</span> nowtime
      <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14);function u(r,d){return s(),e("div",null,[c,i,t(" more "),l])}const h=a(o,[["render",u],["__file","防抖节流.html.vue"]]);export{h as default};
