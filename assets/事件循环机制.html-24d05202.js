import{_ as n,W as s,X as a,Y as e,$ as t,a1 as c}from"./framework-b609eea8.js";const o="/assets/事件循环-e14426b0.png",p={},i=t("p",null,"本章节主要讲事件循环（Event Loop），宏任务，微任务，执行栈和任务队列等",-1),l=c(`<h2 id="_1-前言" tabindex="-1"><a class="header-anchor" href="#_1-前言" aria-hidden="true">#</a> 1.前言</h2><p>javascript执行主要包括同步任务和异步任务：</p><ul><li>同步任务：会放入执行栈中，按顺序执行任务</li><li>异步任务：会放入到任务队列中，这些异步任务一定要等到执行栈清空后才会执行</li></ul><h2 id="_2-消息队列" tabindex="-1"><a class="header-anchor" href="#_2-消息队列" aria-hidden="true">#</a> 2. 消息队列</h2><h3 id="_2-1-宏任务" tabindex="-1"><a class="header-anchor" href="#_2-1-宏任务" aria-hidden="true">#</a> 2.1 宏任务</h3><p><code>script</code>标签中的整体代码、<code>Ajax</code>请求、<code>setTimeout</code>、<code>setInterval</code>、<code>setImmediate</code>、<code>I/O</code>、<code>UI</code>渲染</p><h3 id="_2-2-微任务" tabindex="-1"><a class="header-anchor" href="#_2-2-微任务" aria-hidden="true">#</a> 2.2 微任务</h3><p><code>process.nextTick()</code>、<code>promise.then().catch()</code> 和 <code>.finally(）</code>、<code>await</code>后面的代码</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;fun1 start&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">await</span> <span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;我是await后面的代码&#39;</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;fun1 end&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;fun2 start&#39;</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;fun2 end&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;await 阻塞，导致await后面的代码进入微任务&#39;</span><span class="token punctuation">)</span>

<span class="token comment">//打印结果</span>
fun1 start
fun2 start
fun2 end
<span class="token keyword">await</span> 阻塞，导致<span class="token keyword">await</span>后面的代码进入微任务
我是<span class="token keyword">await</span>后面的代码
fun1 end
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-事件循环" tabindex="-1"><a class="header-anchor" href="#_3-事件循环" aria-hidden="true">#</a> 3. 事件循环</h2><p><img src="`+o+'" alt=""></p><p>​ 当同步代码执行完毕后，就会执行所有的宏任务，宏任务执行完成后，会判断是否有可执行的微任务；</p><p>​ 如果有，则执行微任务，完成后，执行宏任务；</p><p>​ 如果没有，则形成新的红任务，形成事件循环。</p>',14);function u(d,r){return s(),a("div",null,[i,e(" more "),l])}const v=n(p,[["render",u],["__file","事件循环机制.html.vue"]]);export{v as default};
