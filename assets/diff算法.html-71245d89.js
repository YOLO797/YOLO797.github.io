import{_ as o,W as c,X as a,Y as i,$ as e,a0 as d,a1 as r}from"./framework-b609eea8.js";const s="/assets/新前与旧前-fc0aa0e2.jpg",t="/assets/新后与旧后-556e5db1.jpg",l="/assets/新后与旧前-aaae6acc.jpg",p="/assets/新前与旧后-2f1ccadf.jpg",n="/assets/暴力比对-aa974466.jpg",h="/assets/新节点有剩余-68c7701c.jpg",f="/assets/老节点有剩余-d006b5b1.jpg",u="/assets/相同前置节点-197c8d0e.jpg",_="/assets/相同后置节点-b8002db1.jpg",m="/assets/新子节点剩余-f93e3cf5.jpg",g="/assets/老子节点剩余-9cf2ef2e.jpg",k="/assets/新老子节点剩余-fe3c68d9.jpg",v="/assets/移动节点-850daf44.jpg",x="/assets/最长递增子序列-b4a1ff7f.jpg",b={},j=e("p",null,[d("本文是对 "),e("code",null,"diff"),d(" 算法的整理，主要讲述 "),e("code",null,"vue2"),d(" 和 "),e("code",null,"vue3"),d(" 中 "),e("code",null,"diff"),d(" 算法的实现流程。")],-1),E=r('<h3 id="_1-虚拟dom和diff算法" tabindex="-1"><a class="header-anchor" href="#_1-虚拟dom和diff算法" aria-hidden="true">#</a> 1. 虚拟DOM和diff算法</h3><p>虚拟<code>DOM</code>：用来表示真实 <code>DOM</code> 的对象，<code>vue</code> 通过模板变生成虚拟 <code>DOM</code>树，然后再通过渲染器渲染成真实 <code>DOM</code>，当数据更新时，产生新的虚拟 <code>dom</code> 树。</p><p><code>diff</code> 算法：是一种对比算法。对比两者的旧虚拟 <code>DOM</code> 和新虚拟 <code>DOM</code>，比较新旧节点，只会在同层级对比，不会跨层级比较。</p><p><code>diff</code> 整体策略：<mark>深度优先，同层比较</mark></p><h3 id="_2-vue2双端diff算法实现" tabindex="-1"><a class="header-anchor" href="#_2-vue2双端diff算法实现" aria-hidden="true">#</a> 2. vue2双端diff算法实现</h3><p><code>vue2</code> 采用 <mark>双端 <code>diff</code> 算法</mark>。核心方法是 <mark><code>updateChildren</code></mark>，通过 <mark>新前与旧前、新后与旧后、新后与旧前、新前与旧后、暴力比对</mark>5种查找。</p><h4 id="_2-1-新前与旧前" tabindex="-1"><a class="header-anchor" href="#_2-1-新前与旧前" aria-hidden="true">#</a> 2.1 新前与旧前</h4><p><img src="'+s+'" alt="新前与旧前"></p><p>新前与旧前对比：</p><ul><li>相同，新、老的开始下标往后移动一格，上图中 <code>a</code> 的新老节点相同，位置移动到 <code>b</code> ，此时新节点为 <code>f</code> ，两节点不同</li><li>不同，进入新后与旧后对比</li></ul><h4 id="_2-2-新后与旧后" tabindex="-1"><a class="header-anchor" href="#_2-2-新后与旧后" aria-hidden="true">#</a> 2.2 新后与旧后</h4><p><img src="'+t+'" alt="新后与旧后"></p><p>新后与旧后：</p><ul><li>相同，新、老的结束下标往前移动一格</li><li>新前与旧前、新后与旧后对比都不同，进行新后与旧前对比</li></ul><h4 id="_2-3-新后与旧前" tabindex="-1"><a class="header-anchor" href="#_2-3-新后与旧前" aria-hidden="true">#</a> 2.3 新后与旧前</h4><p><img src="'+l+'" alt="新后与旧前"></p><p>新后与旧前：</p><ul><li>相同，把老的开始节点移动到老的结束节点前面，老的开始节点下标往后移动一格，新的结束下标往前移动一格</li><li>新前与旧前、新后与旧后、新后与旧前对比都不同，进入新前与旧后比对</li></ul><h4 id="_2-4-新前与旧后" tabindex="-1"><a class="header-anchor" href="#_2-4-新前与旧后" aria-hidden="true">#</a> 2.4 新前与旧后</h4><p><img src="'+p+'" alt="新前与旧后"></p><p>新前与旧后：</p><ul><li>相同，把老的结束节点移动到老的开始节点前面，然后新的开始下表往后移动一格，老的结束下标往前移动一格</li></ul><h4 id="_2-5-暴力比对-乱序" tabindex="-1"><a class="header-anchor" href="#_2-5-暴力比对-乱序" aria-hidden="true">#</a> 2.5 暴力比对（乱序）</h4><p><img src="'+n+'" alt="暴力比对"></p><p>以上4种方法都不适用时，采用最暴力的方法。</p><ul><li>循环 <code>oldChildren</code> 生成一个 <code>key</code> 和 <code>index</code> 的映射表 <code>{ &#39;a&#39;:0, &#39;b&#39;:1 }</code></li><li>用新的开始节点的 <code>key</code>，去映射表中查找 <ul><li>找到 =&gt; 将该节点移动到最前面，原来的位置使用 <code>undefined</code> 占位，避免数组塌陷，防止老节点移动走后破坏初始的映射表位置</li><li>没有找到 =&gt; 直接将新节点插入</li></ul></li></ul><h4 id="_2-6-新节点有剩余" tabindex="-1"><a class="header-anchor" href="#_2-6-新节点有剩余" aria-hidden="true">#</a> 2.6 新节点有剩余</h4><p><img src="'+h+'" alt="新节点有剩余"></p><p>当 <code>oldStartIndex &gt; oldEndIndex</code> 时对比结束，新的子节点还有多余节点，需要循环插入多余节点</p><h4 id="_2-7-老节点有剩余" tabindex="-1"><a class="header-anchor" href="#_2-7-老节点有剩余" aria-hidden="true">#</a> 2.7 老节点有剩余</h4><p><img src="'+f+'" alt="老节点有剩余"></p><p>当 <code>newStartIndex &gt; newOldIndex</code>时对比结束，老节点还有多余节点时，循环删除多余节点</p><h3 id="_3-vue3快速diff算法实现" tabindex="-1"><a class="header-anchor" href="#_3-vue3快速diff算法实现" aria-hidden="true">#</a> 3. vue3快速diff算法实现</h3><p>借鉴了纯文本 <code>diff</code> 算法中的预处理思路，处理新旧两个组子节点中相同的前置节点和后置节点。处理完后，如果剩余节点无法简单的通过挂载新节点或者卸载已经不存在的节点来完成更新，则需要根据<strong>节点的索引关系，构建出一个最长递增子序列</strong>。最长递增子序列所指向的节点即为不需要移动的节点。</p><h4 id="_3-1-相同前置节点处理" tabindex="-1"><a class="header-anchor" href="#_3-1-相同前置节点处理" aria-hidden="true">#</a> 3.1 相同前置节点处理</h4><p><img src="'+u+'" alt="相同前置节点"></p><p>前置节点的处理：</p><p>定义一个 <code>j</code> 变量，分别指向新、老两给子节点，比较新、老节点是否相同，如果相同指针 +1，直到两个节点不同时结束前置节点的处理</p><h4 id="_3-2-相同后置节点处理" tabindex="-1"><a class="header-anchor" href="#_3-2-相同后置节点处理" aria-hidden="true">#</a> 3.2 相同后置节点处理</h4><p><img src="'+_+'" alt="相同后置节点"></p><p>后置节点的处理：</p><p>定义一个索引 <code>oldEnd</code> 指向旧的一组子节点的最后一个节点和索引 <code>newEnd</code> 指向新的一组子节点的最后一个节点。然后比较两个指向的新旧节点，相同指向 +1，知道两个节点不同时结束后置节点的处理</p><h4 id="_3-3-剩余节点的处理" tabindex="-1"><a class="header-anchor" href="#_3-3-剩余节点的处理" aria-hidden="true">#</a> 3.3 剩余节点的处理</h4><ul><li><p>只有新的一组的子节点有剩余</p><p><img src="'+m+'" alt=""></p><p>当条件满足 <strong><code>j &gt; oldEnd</code></strong> 且 <strong><code>j &lt;= newEnd</code></strong> 时，表示只有<strong>新子节点还有剩余</strong>，需要循环 <code>j --&gt; newEnd</code> 中的节点然后进行<strong>插入</strong></p></li><li><p>只有旧的一组的子节点有剩余</p><p><img src="'+g+'" alt="老子节点剩余"></p><p>当条件满足 <strong><code>j &gt; newEnd</code></strong> 且 <strong><code>j &lt;= oldEnd</code></strong> 时，表示只有<strong>老子节点还有剩余</strong>，需要循环 <code>j --&gt; oldEnd</code> 中的节点然后进行<strong>删除</strong></p></li><li><p>新老两组的子节点都有剩余</p><ol><li><p>生成一个 <code>socurce</code> 数组，存放新节点在老节点的索引，初始值都为 -1，定义一个变量 <code>patched</code> 用于记录，然后遍历新的一组的子节点，构建 <code>key</code> 与 <code>index</code> 的映射表，最后<mark>遍历老的一组的节点，去映射表中寻找</mark>，<code>k = keyIndex[oldVnode.key]</code>，如果找到就把对应的索引存到 <code>source</code> 对应的位置中，没有找到说明该节点多余，直接删除</p><p><img src="'+k+'" alt="新老子节点剩余"></p></li><li><p>判断新节点是否需要移动</p><ul><li><code>k</code>：当前节点在新节点数组中的索引</li><li><code>pos</code>：上一个节点在新节点数组中的索引</li><li><code>moved</code>：记录是否需要移动的阈值（<code>true/false</code>）</li></ul><p><code>k &lt; pos</code>：新节点的顺序不是升序，需要移动利用最长递增子序列来优化移动逻辑</p><p><img src="'+v+'" alt="移动节点"></p></li><li><p>利用最长递增子序列来优化移动逻辑</p><p>如果 <code>moved = true</code>，首先通过最长递增子序列获取到升序列表存放的是索引，然后从后面遍历新的一组节点，节点的索引与升序列表对比，如果对比相同，则不需要移动，否则将该节点所对应的老节点移动到当前位置</p><p><img src="'+x+'" alt="最长递增子序列"></p></li></ol></li></ul><h3 id="_4-vue2和vue3的diff区别" tabindex="-1"><a class="header-anchor" href="#_4-vue2和vue3的diff区别" aria-hidden="true">#</a> 4. vue2和vue3的diff区别</h3><ul><li><p><mark><code>vue2</code>是全量进行 <code>diff</code>，而 <code>vue3</code> 使用了静态标记，支队打标记的节点进行 <code>diff</code></mark></p><ul><li><p><code>vue2</code>中的虚拟 <code>dom</code> 是进行<mark>全量的对比</mark>，在运行的时候会对所有节点生成一个虚拟节点树，当页面数据发生变更后，会遍历判断虚拟 <code>dom</code>所有的节点（包括一些不会变化的节点）有没有变化</p></li><li><p><code>vue3</code> 相对于 <code>vue2</code>中增加了静态标记，在模板编译时，编译器会在动态标签末尾加上 <code>/* Text*/ PatchFlag</code>。<mark>在生成 <code>VNode</code> 时，同时打上标记</mark>，<code>patch</code> 过程中就会判断这个标记来 <code>Diff</code> 优化流程，跳过一些静态节点对比</p></li></ul></li><li><p><mark>处理完首尾节点后，对剩余节点的处理方式</mark></p><ul><li><code>vue2</code>中通过对旧节点列表建立一个 <code>{key:index}</code> 的映射表，然后遍历新节点列表的剩余节点，通过key去映射表中查找，找到 就移动到最前，原来位置为 <code>undefined</code>，没有找到就插入</li><li><code>vue3</code>时建立一个存储新节点的剩余节点在旧节点上的索引的映射关系数组，找到最长递增子序列，然后从后遍历，将新节点数组的剩余节点移动到正确位置</li></ul></li></ul>',46);function D(O,y){return c(),a("div",null,[j,i(" more "),E])}const w=o(b,[["render",D],["__file","diff算法.html.vue"]]);export{w as default};
