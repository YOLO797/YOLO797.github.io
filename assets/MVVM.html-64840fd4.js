import{_ as e,W as o,X as d,Y as c,$ as l,a1 as i}from"./framework-b609eea8.js";const r={},a=l("p",null,"MVVM和MVC的区别",-1),t=i('<h3 id="_1-mvvm" tabindex="-1"><a class="header-anchor" href="#_1-mvvm" aria-hidden="true">#</a> 1. MVVM</h3><p><code>MVVM</code> 是 <code>Model-View-ViewModel</code> 的缩写。</p><p><code>Model</code> ：代表数据模型，定义数据操作的业务逻辑。</p><p><code>View</code>：代表视图层，负责将数据模型渲染到页面上。</p><p><code>ViewModel</code>：通过双向绑定把 <code>View</code> 和 <code>Model</code> 进行同步交互，不需要手动操作 <code>DOM</code>。</p><p><strong>优点：</strong></p><ul><li>低耦合 <ul><li>视图（<code>View</code>）可以独立于 <code>Model</code>变化和修改，一个 <code>Model</code>可以绑定在不同的 <code>View</code>上</li><li>当 <code>View</code> 变化的时候 <code>Model</code> 可以不改变，当 <code>Model</code>变化时，<code>View</code>也可不改变</li></ul></li><li>可重用性</li><li>独立开发：<mark>双向数据绑定的模式，实现 <code>View</code> 和 <code>Model</code> 自动同步，因此开发者只需要专注对数据维护操作即可，不需要一直操作 <code>DOM</code></mark></li></ul><h3 id="_2-mvc" tabindex="-1"><a class="header-anchor" href="#_2-mvc" aria-hidden="true">#</a> 2. MVC</h3><p><code>MVC</code> 是 <code>Model-View-Controller</code>，是模型 - 视图 - 控制器的缩写</p><p><code>Model</code> ：模型，处理应用程序数据逻辑部分。</p><p><code>View</code>：视图，处理数据显示部分。</p><p><code>Controller</code>：数据模型和视图之间的桥梁，通常控制器负责从事读取数据，控制用户输入并向模型发送数据。</p><p><strong>优点：</strong></p><ul><li><strong>耦合度低</strong>（三个部件相互独立，改变其中一个不会影响另外两个）</li><li>重用性高（多个视图使用同一个模型）</li><li>生命周期成本低</li><li>部署快（业务分工明确）</li><li><strong>可维护性高</strong></li></ul><p><strong>缺点：</strong></p><ul><li>不适合小型项目开发</li><li><strong>视图域控制器联系过于紧密</strong>，妨碍了它们的独立重用</li></ul><h3 id="_3-mvvm和mvc的区别" tabindex="-1"><a class="header-anchor" href="#_3-mvvm和mvc的区别" aria-hidden="true">#</a> 3. MVVM和MVC的区别</h3><p>最大的区别就是：实现了 <code>View</code> 和 <code>Model</code> 的自动同步</p><h3 id="_4-mvvm的响应式原理" tabindex="-1"><a class="header-anchor" href="#_4-mvvm的响应式原理" aria-hidden="true">#</a> 4. MVVM的响应式原理？</h3>',19);function n(s,V){return o(),d("div",null,[a,c(" more "),t])}const h=e(r,[["render",n],["__file","MVVM.html.vue"]]);export{h as default};
