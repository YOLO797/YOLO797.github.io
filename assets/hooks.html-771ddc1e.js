import{_ as p,W as o,X as c,Y as i,$ as n,a0 as s,Z as t,a1 as e,C as l}from"./framework-b609eea8.js";const u={},d=n("p",null,[n("strong",null,"Vue3"),s(" 的一些基本知识")],-1),r=n("h2",{id:"_1-mixin",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-mixin","aria-hidden":"true"},"#"),s(" 1. Mixin")],-1),k={href:"https://juejin.cn/post/7076340796361801759",target:"_blank",rel:"noopener noreferrer"},m=e(`<p>将组件的公共逻辑或者配置提取出来，哪个组件需要用时直接将提取的这部分混入到组件内部即可。</p><p><strong><code>mixin</code>和<code>vuex</code>的区别：</strong></p><ul><li><code>vuex</code> 公共状态管理，如果在一个组件中更改数据，其余引用的该数据一起更改。</li><li><code>mixin</code> 中的数据和方法是独立的，组件之间使用后是<strong>互不影响</strong>的。</li></ul><h3 id="_1-1-自定义mixin" tabindex="-1"><a class="header-anchor" href="#_1-1-自定义mixin" aria-hidden="true">#</a> 1.1 自定义mixin</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// src/mixin/index.js</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> mixins <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2-局部混入" tabindex="-1"><a class="header-anchor" href="#_1-2-局部混入" aria-hidden="true">#</a> 1.2 局部混入</h3><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>//引入
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">import</span> <span class="token punctuation">{</span> mixins <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./mixin/index&#39;</span>
  <span class="token keyword">export</span> <span class="token keyword">default</span><span class="token punctuation">{</span>
    <span class="token literal-property property">mixins</span><span class="token operator">:</span><span class="token punctuation">[</span> mixins <span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>mixin</code> 中的生命周期函数会和组件的生命周期函数一起合并执行</li><li><code>mixin</code> 中的data数据在组件中可以直接使用</li><li><code>mixin</code> 中的方法在组件中可以直接调用</li><li>生命周期函数合并后执行顺序：先执行<code>mixin</code> 中的，后执行组件的</li></ul><h3 id="_1-3-优缺点" tabindex="-1"><a class="header-anchor" href="#_1-3-优缺点" aria-hidden="true">#</a> 1.3 优缺点</h3><p><strong>优点：</strong></p><ul><li>提高代码的复用性。</li><li>无需传递状态。</li><li>维护方便，只需修改一个地方即可。</li></ul><p><strong>缺点：</strong></p><ul><li>命名冲突</li><li>滥用的话后期不好维护</li><li>不好追溯源，排查问题较麻烦</li><li>不能轻易的重复代码</li></ul><h2 id="_2-hooks函数" tabindex="-1"><a class="header-anchor" href="#_2-hooks函数" aria-hidden="true">#</a> 2. Hooks函数</h2>`,14),v={href:"https://juejin.cn/post/7083401842733875208",target:"_blank",rel:"noopener noreferrer"},h=e(`<h3 id="_2-1-hooks" tabindex="-1"><a class="header-anchor" href="#_2-1-hooks" aria-hidden="true">#</a> 2.1 Hooks</h3><p>​ 将文件的一些单独功能的<code>js/ts</code>代码进行抽离出来，放入单独的<code>js/ts</code>文件中，或者说是一些可复用的公共方法/功能。</p><p>​ 实现高内聚低耦合。</p><ul><li><code>vue3</code> 的 <code>hook</code> 函数相当于 <code>vue2</code> 中的 <code>mixin</code> ，不同在于 <code>hooks</code>是函数</li><li><code>vue3</code> 的<code>hook</code> 函数可以帮助我们提高代码的复用性，让我们能在不同的组件中利用<code>hook</code>函数</li></ul><h3 id="_2-2-自定义hook" tabindex="-1"><a class="header-anchor" href="#_2-2-自定义hook" aria-hidden="true">#</a> 2.2 自定义Hook</h3><ol><li><p>将可复用功能抽离为外部<code>js/ts</code>文件</p></li><li><p>函数名/文件名以 <code>use</code> 开头，形如：<code>useXXX</code></p></li><li><p>引用时将响应式变量或者方法显示解构暴露出来： <code>const { count, Fn } = useXXX()</code></p></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 加法 Hook</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>ref<span class="token punctuation">,</span> watch<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">const</span> <span class="token function-variable function">useAdd</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">}</span></span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  <span class="token keyword">const</span> addNum <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">[</span>num1<span class="token punctuation">,</span>num2<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>num1<span class="token punctuation">,</span>num2<span class="token punctuation">]</span></span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token function">addFn</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> <span class="token function-variable function">addFn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span> num2</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    addNum<span class="token punctuation">.</span>value <span class="token operator">=</span> num1 <span class="token operator">+</span> num2
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    addNum<span class="token punctuation">,</span>
    addFn
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> useAdd
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    num1: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>num1<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    num2: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>num2<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>加法等于： {{addNum}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">import</span> <span class="token punctuation">{</span>ref<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
  <span class="token keyword">import</span> <span class="token punctuation">{</span>useAdd<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./hooks/useAdd.js&#39;</span>  <span class="token comment">//引入hook</span>

  <span class="token keyword">const</span> num1 <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> num2 <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
  <span class="token comment">//自定义hook ， 将响应式变量和方法暴露出来</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span>addNum<span class="token punctuation">,</span> addFn<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useAdd</span><span class="token punctuation">(</span><span class="token punctuation">{</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token function">addFn</span><span class="token punctuation">(</span>num1<span class="token punctuation">.</span>value<span class="token punctuation">,</span> num2<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-hooks-与-mixin" tabindex="-1"><a class="header-anchor" href="#_2-3-hooks-与-mixin" aria-hidden="true">#</a> 2.3 Hooks 与 Mixin</h3><ul><li><p><code>mixin</code> 难以追溯方法和属性，<code>vue3</code> 自定义的 <code>hooks</code> 却可以</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Mixin</span>
<span class="token keyword">export</span> <span class="token keyword">default</span><span class="token punctuation">{</span>
	<span class="token literal-property property">mixin</span><span class="token operator">:</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>e<span class="token punctuation">]</span> <span class="token comment">//一个组件内可以混入各种功能的Mixin</span>
	<span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>  <span class="token comment">//问题： 不清楚这个name来自于哪个mixin?</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Hooks  引用时将响应式变量或者方法显式暴露出来</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span>nameRef<span class="token punctuation">,</span> Fn<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useXX</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>无法像 <code>mixin</code> 传递参数来改变逻辑，<code>hooks</code> 却可以</p></li><li><p><code>mixin</code> 同名变量或方法会被覆盖，<code>hook</code> 可以在引用的时候对同名变量重命名</p></li></ul>`,10);function b(g,x){const a=l("ExternalLinkIcon");return o(),c("div",null,[d,i(" more "),r,n("p",null,[n("a",k,[s("参考链接"),t(a)])]),m,n("p",null,[n("a",v,[s("Hook链接"),t(a)])]),h])}const _=p(u,[["render",b],["__file","hooks.html.vue"]]);export{_ as default};
